<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hcaijin.com</title>
  
  <subtitle>Graz&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hcaijin.com/"/>
  <updated>2018-06-13T13:20:30.327Z</updated>
  <id>http://hcaijin.com/</id>
  
  <author>
    <name>Graz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用OPENWRT路由器抓包网络流量笔记</title>
    <link href="http://hcaijin.com/openwrt-wireshark-setting/"/>
    <id>http://hcaijin.com/openwrt-wireshark-setting/</id>
    <published>2018-06-13T11:50:11.000Z</published>
    <updated>2018-06-13T13:20:30.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>openwrt是一款基于linux的路由器系统，可以安装很多相关的工具包，完成像linux系统服务器可以完成的工作，比如今天我们要讲的路由器的网络数据包抓包。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>安装了openwrt的路由器，ip地址：192.168.10.1</li><li>要抓包流量的Android手机，ip地址：192.68.10.235</li><li>工作台笔记本，ip地址：192.168.10.234</li></ul><h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><blockquote><p>以下介绍两种方法都可以实现路由器数据包抓取的功能</p></blockquote><p><strong><em>简单的说明<br>根据openwrt文档，所有的局域网的数据最后都是通过br-lan虚拟网卡来做转发，所以对此网卡进行监控即可<br>此命令本质是远程在路由器上执行网络监控命令，输入文本到本机的wireshark里面<br>使用wireshark作为可视化工具来查看</em></strong></p><h2 id="捕获与tcpdump的通信"><a href="#捕获与tcpdump的通信" class="headerlink" title="捕获与tcpdump的通信"></a>捕获与tcpdump的通信</h2><blockquote><p>Tcpdump可以安装在OpenWrt路由器上。因此，这种方法消除了让远程Wireshark或类似听众实时分析流量的需要。</p></blockquote><p>ssh登陆到openwrt(默认端口：22)，更新并安装tcpdump<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install tcpdump</span><br></pre></td></tr></table></figure><p></p><p>执行以下命令在接口（-i）上侦听并将捕获的信息存储到文件（-w），并在执行此操作时（-v）进行冗长操作。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i any -v -w pcap.cap</span><br></pre></td></tr></table></figure><p></p><p>生成的pcap.cap文件，我们可以传回工作台，用wireshark打开做进一步的分析</p><blockquote><p>以下是一些使用tcpdump的例子：</p></blockquote><ul><li><a href="https://www.rationallyparanoid.com/articles/tcpdump.html" target="_blank" rel="noopener">https://www.rationallyparanoid.com/articles/tcpdump.html</a></li></ul><h3 id="制作一键命令脚本"><a href="#制作一键命令脚本" class="headerlink" title="制作一键命令脚本"></a>制作一键命令脚本</h3><p>命令格式如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p ssh端口 -o StrictHostKeyChecking=no ssh用户名@ssh地址 &apos;tcpdump -s 0 -U -n -w - -i br-lan not port ssh端口&apos; | wireshark -k -i -</span><br></pre></td></tr></table></figure><p></p><p>由于我环境配置了不用密码登陆的方式所以我们可以直接写成如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh openwrt &apos;tcpdump -s 0 -U -n -w - -i br-lan not port 22&apos; | wireshark -k -i -</span><br><span class="line">ssh -p 22 -o StrictHostKeyChecking=no root@192.168.10.1 &apos;tcpdump -s 0 -U -n -w - -i br-lan not port 22&apos; | wireshark -k -i -</span><br></pre></td></tr></table></figure><p></p><blockquote><p>前面讲述了基本的原理和操作手段，但是缺点是每次都需要输入长串命令行和密码，可以利用linux的一些小操作技巧，简化此过程，做成一个命令工具，方便随时调用。<br>基本原理：</p><ul><li>使用 sshpass 工具来做密码输入</li><li>使用 alias 别名来做成命令语句</li></ul></blockquote><p>在工作台安装sshpass，执行以下脚本：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S sshpass</span><br><span class="line">sshpass -p &apos;password&apos; ssh -p 22 -o StrictHostKeyChecking=no root@192.168.10.1 &apos;tcpdump -s 0 -U -n -w - -i br-lan not port 22&apos; | wireshark-gtk -k -i -</span><br></pre></td></tr></table></figure><p></p><p>把执行语句写到<code>.bash_rc</code>就可以一条命令执行抓包分析了<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias tsharkbyopenwrt=&quot;sshpass -p &apos;password&apos; ssh -p 22 -o StrictHostKeyChecking=no root@192.168.10.1 &apos;tcpdump -s 0 -U -n -w - -i br-lan not port 22&apos; | wireshark-gtk -k -i -&quot;</span><br></pre></td></tr></table></figure><p></p><h3 id="完善脚本"><a href="#完善脚本" class="headerlink" title="完善脚本"></a>完善脚本</h3><p>通过命名管道来导回数据<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfifo /tmp/fifo</span><br><span class="line">sshpass -p &apos;passwrod&apos; ssh openwrt &apos;tcpdump -s 0 -U -n -w - -i br-lan not port 22&apos; &gt; /tmp/fifo &amp; wireshark-gtk -k -i /tmp/fifo</span><br></pre></td></tr></table></figure><p></p><p><em>这里我配置了<code>.ssh/config</code>，所以可以直接使用<code>ssh openwrt</code>命令代替前面指定端口与用户名的方式。</em></p><blockquote><p>我们还有一个方法可以不用安装sshpass,直接使用密钥的方式来登陆路由器抓包,以上就可以写为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id openwrt</span><br><span class="line">ssh openwrt &apos;tcpdump -s 0 -U -n -w - -i br-lan not port 22&apos; &gt; /tmp/fifo &amp; wireshark-gtk -k -i /tmp/fifo</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="使用远程Wireshark侦听器进行分析"><a href="#使用远程Wireshark侦听器进行分析" class="headerlink" title="使用远程Wireshark侦听器进行分析"></a>使用远程Wireshark侦听器进行分析</h2><p>ssh登陆到openwrt(默认端口：22)，更新并安装iptables-mod-tee<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update </span><br><span class="line">opkg install iptables-mod-tee</span><br></pre></td></tr></table></figure><p></p><p>运行以下iptables命令以“在输出接口（-o）上将源IP（-s）的每个数据包的副本转发到网关IP（ - 网关）”<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A POSTROUTING -t mangle -o br-lan ! -s 192.168.10.235 -j TEE --gateway 192.168.10.234</span><br></pre></td></tr></table></figure><p></p><p>运行以下iptables命令以“在接口（-i）上将目的IP（-d）的每个数据包的副本转发到网关IP（ - 网关）”<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A PREROUTING -t mangle -i br-lan ! -d 192.168.10.235 -j TEE --gateway 192.168.10.234</span><br></pre></td></tr></table></figure><p></p><p>在Wireshark上开始捕获流量并应用下面的过滤器：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ip.src == 192.168.9.121) || (ip.dst == 192.168.9.121)</span><br></pre></td></tr></table></figure><p></p><p>关于iptable规则一些有用的资源：</p><ul><li><a href="https://wiki.openwrt.org/doc/howto/netfilter" target="_blank" rel="noopener">https://wiki.openwrt.org/doc/howto/netfilter</a></li><li><a href="http://www.faqs.org/docs/iptables/index.html" target="_blank" rel="noopener">http://www.faqs.org/docs/iptables/index.html</a></li><li><a href="http://ipset.netfilter.org/iptables-extensions.man.html#lbDW" target="_blank" rel="noopener">http://ipset.netfilter.org/iptables-extensions.man.html#lbDW</a></li></ul><h2 id="安装使用CloudShark"><a href="#安装使用CloudShark" class="headerlink" title="安装使用CloudShark"></a>安装使用CloudShark</h2><p>CloudShark是一个独立的，与LEDE无关的云分析平台。它依靠cshark插件远程发送数据包进行分析。请检查您的内部规则，是否允许将网络流量发送到云平台。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install cshark luci-app-cshark</span><br></pre></td></tr></table></figure><p></p><p>请查看<a href="https://support.cloudshark.org/openwrt/openwrt-cloudshark.html" target="_blank" rel="noopener">Cloud Shark文档</a>以获取更多信息。</p><h1 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h1><p>在工作台使用wireshark-gtk的时候报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Couldn&apos;t run /usr/bin/dumpcap in child process: Permission denied</span><br></pre></td></tr></table></figure><p>这是由于dumpcap这个的权限问题。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ll /usr/bin/dumpcap                                                                  :(</span><br><span class="line">-rwxr-xr-- 1 root wireshark 102K May 23 06:39 /usr/bin/dumpcap</span><br></pre></td></tr></table></figure><p></p><p>只要把当前用户加入到wireshark用户组里，重启就ok了（暂时不明为什么一定要重启，反正我是重启以后才正常使用的)。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG wireshark $LOGNAME</span><br><span class="line">sudo setcap cap_net_raw,cap_net_admin+eip /usr/bin/dumpcap</span><br></pre></td></tr></table></figure><p></p><p><em>setcat对应使用getcap查看当前的方法权限</em></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.ayomaonline.com/security/analyzing-network-traffic-with-openwrt/" target="_blank" rel="noopener">ANALYZING NETWORK TRAFFIC WITH OPENWRT</a></li><li><a href="https://openwrt.org/docs/guide-user/firewall/capture-filter-inspect-packets" target="_blank" rel="noopener">How to capture, filter and inspect packets</a></li><li><a href="http://www.ayomaonline.com/security/getting-started-with-openwrt-linuxfying-routers/" target="_blank" rel="noopener">GETTING STARTED WITH OPENWRT – LINUXFYING ROUTERS</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;openwrt是一款基于linux的路由器系统，可以安装很多相关的工具包，完成像linux系统服务器可以完成的工作，比如今天我们要讲的路由器
      
    
    </summary>
    
    
      <category term="openwrt" scheme="http://hcaijin.com/tags/openwrt/"/>
    
      <category term="wireshark" scheme="http://hcaijin.com/tags/wireshark/"/>
    
      <category term="cloudshark" scheme="http://hcaijin.com/tags/cloudshark/"/>
    
  </entry>
  
  <entry>
    <title>UEFI+GPT安装Archlinux与Win10双系统教程</title>
    <link href="http://hcaijin.com/archlinux-uefi-bootloader/"/>
    <id>http://hcaijin.com/archlinux-uefi-bootloader/</id>
    <published>2018-06-09T16:42:24.000Z</published>
    <updated>2018-06-09T18:51:23.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>最近新入手一台Thinkpad,使用UEFI+GPT预安装好了Win10操作系统，准备开始安装Archlinux。</p></blockquote><p>如果你准备在一块新硬盘上安装双系统，那么应该先安装windows。<br>如果你安装的是Win10，那么它应该默认就是按UEFI+GPT方式安装的，可以按Win+X键打开磁盘管理，如果是UEFI安装的，那么应该有一个EFI分区，可能是250M。<br>其它还有Windows的恢复分区和基本数据分区。不用管恢复分区，如果现在磁盘上没有剩余空间，可以右键点击基本数据分区，点击压缩卷，给Arch的安装腾出空间。用右键点击磁盘，查看属性，可以知道自己是否采用了GPT分区方式。</p><p>在安装之前，请在电源计划中关掉Windows的快速启动，并在BIOS中关掉Secure Boot，可以很容易搜到对应自己电脑的具体方法。<br>如果上面有哪一条没有满足，请只看一看我遇到的问题，具体安装请再参考其它教程</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装之前"><a href="#安装之前" class="headerlink" title="安装之前"></a>安装之前</h2><ul><li>准备一个大于4G的U盘</li><li>安装镜像，可以从Arch Linux的<a href="www.archlinux.org">官方网站</a>下载</li></ul><h2 id="制作U盘启动盘"><a href="#制作U盘启动盘" class="headerlink" title="制作U盘启动盘"></a>制作U盘启动盘</h2><p>这里我只介绍linux系统下使用<code>dd</code>的方式，windows下面的方法可以看一下这个<a href="https://github.com/mytbk/Linux_Notes/blob/master/install/install-archlinux.md" target="_blank" rel="noopener">安装教程</a></p><p>插入U盘，查看U盘设备名,不需求挂载<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br><span class="line">sudo dd if=archlinux-2018.06.01-x86_64.iso of=/dev/sdb</span><br></pre></td></tr></table></figure><p></p><p>这样，就制作好了U盘启动了，把U盘插入要安装的机子，配置BIOS通过U盘启动，就可以进入光盘引导的临时系统。</p><h2 id="选择镜像源"><a href="#选择镜像源" class="headerlink" title="选择镜像源"></a>选择镜像源</h2><p>Arch Linux是通过网络进行安装的，为了以更快的速度下载软件包，建议先配置镜像源。配置镜像源的方法是编辑/etc/pacman.d/mirrorlist这个文件，将想用的镜像源的放到第一个非井号开头的行即可。如下可将中科大镜像源作为首选镜像源。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># /etc/pacman.d/mirrorlist</span><br><span class="line"># This is the USTC mirror</span><br><span class="line">Server = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line"></span><br><span class="line"># and other mirrors</span><br><span class="line">## Score: 4.6, China</span><br><span class="line">Server = http://mirrors.163.com/archlinux/$repo/os/$arch</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p></p><p>配置完成后可以执行pacman -Syy试一下，可以看一下pacman从镜像站下载文件的速度。</p><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><blockquote><p>我们前面提过已经默认有安装的Win10系统,使用<code>fdisk</code>可以看到已经有一个EFI分区为250M大小。因此不要单独为Linux分出EFI分区，因为要双系统启动的话应该把Win10的EFI分区挂载到/boot上。</p></blockquote><p>以下是我的硬盘分区情况,因为我还有一块硬盘用来挂载/home，所以我只要创建根分区和swap分区<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Device             Start       End   Sectors  Size Type</span><br><span class="line">/dev/nvme0n1p1      2048    534527    532480  260M EFI System</span><br><span class="line">/dev/nvme0n1p2    534528    567295     32768   16M Microsoft reserved</span><br><span class="line">/dev/nvme0n1p3    567296 254337023 253769728  121G Microsoft basic data</span><br><span class="line">/dev/nvme0n1p4 254337024 485023743 230686720  110G Linux filesystem</span><br><span class="line">/dev/nvme0n1p5 498069504 500117503   2048000 1000M Windows recovery environment</span><br><span class="line">/dev/nvme0n1p6 485023744 497606655  12582912    6G Linux swap</span><br></pre></td></tr></table></figure><p></p><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/nvme0n1p4</span><br><span class="line"></span><br><span class="line">mkswap /dev/nvme0n1p6</span><br><span class="line">swapon /dev/nvme0n1p6</span><br></pre></td></tr></table></figure><h2 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h2><p>首先，一定是先挂载/分区，再挂载其它分区。因为要使用双系统启动，所以即使没有分/boot分区，还是应该把windows的EFI分区挂载到/上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/nvme0n1p4 /mnt/</span><br><span class="line">mkdir -p /mnt/boot</span><br><span class="line">mount /dev/nvme0n1p1 /mnt/boot</span><br></pre></td></tr></table></figure><h2 id="基本软件安装"><a href="#基本软件安装" class="headerlink" title="基本软件安装"></a>基本软件安装</h2><p>安装Arch Linux的软件很简单，执行下面这条命令就行了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base base-devel</span><br></pre></td></tr></table></figure><h1 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h1><h2 id="创建fstab"><a href="#创建fstab" class="headerlink" title="创建fstab"></a>创建fstab</h2><p>生成一个fstab文件（使用-U或-L分别由UUID或标签定义）：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p></p><h2 id="切换新系统"><a href="#切换新系统" class="headerlink" title="切换新系统"></a>切换新系统</h2><p>现在我们执行<code>arch-chroot /mnt</code>，这样就以chroot的方式进入了新的系统。</p><h2 id="配置时间"><a href="#配置时间" class="headerlink" title="配置时间"></a>配置时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure><h2 id="配置本地化"><a href="#配置本地化" class="headerlink" title="配置本地化"></a>配置本地化</h2><p>在/etc/locale.gen中取消注释en_US.UTF-8 UTF-8和其他所需的本地化，并使用<code>local-gen</code>更新本地语言编码</p><h2 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;hcaijin.com&apos; &gt; /etc/hostname</span><br></pre></td></tr></table></figure><h2 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><h2 id="设置启动"><a href="#设置启动" class="headerlink" title="设置启动"></a>设置启动</h2><p>按照上面的步骤，efi分区应该被挂载到了/boot目录下。这时，我们使用<code>bootctl install</code>命令，安装bootloader，然后用<code>cp /usr/share/systemd/bootctl/arch.conf /boot/loader/entries/</code>把示例文件复制过来，只要修改它的options部分就可以了。<br>以我的/boot分区为例，用<code>blkid -s PARTUUID -o value /dev/nvme0n1p1</code>就可以生成所需要的PARTUUID，最后加上rw就行了。</p><p>格式大概为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title       Arch Linux</span><br><span class="line">linux       /vmlinuz-linux</span><br><span class="line">initrd      /initramfs-linux.img</span><br><span class="line">options     root=UUID=6278bd34-44cd-41b9-9bdd-239d9ce4020a rw</span><br></pre></td></tr></table></figure><p></p><p>意思是创建一个标题为Arch Linux的启动项，它用bootloader所在分区(/dev/sda1)根目录下的vmlinuz-linux作为Linux内核，initramfs-linux.img作为initramfs镜像(可以认为是一个临时rootfs镜像)，并且用root=/dev/sda2 ro作为内核参数。</p><p>再编辑/boot/loader/loader.conf.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timeout 3</span><br><span class="line">default arch</span><br></pre></td></tr></table></figure><p></p><p>意思是默认用arch.conf的配置启动，等待3秒没有键盘操作即使用默认配置启动。</p><h2 id="新系统的网络"><a href="#新系统的网络" class="headerlink" title="新系统的网络"></a>新系统的网络</h2><p>启动盘中默认配置好了有关网络的软件，但新的系统中却没有。<br>如果你只是使用单一且固定的有线网络，使用<code>systemctl enable dhcpcd@interface.service</code>就可以了（interface是你的网络接口名，可以使用ip link查看，类似enp3s0）。<br>如果要使用无线网络，那么就要使用<code>pacman -S iw wpa_supplicant dialog</code>命令安装这些软件包。如果失败，可能要安装固件。</p><p>至此，新系统的配置就完成了。</p><p>使用exit命令退出chroot环境，umount -R /mnt卸载挂载的分区，然后使用reboot重启一下就好了。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>可能会启动失败，解决方法是进入BIOS里的设置把UEFI作为唯一的启动方式。然后保存退出，就可以看到有三个启动项（分别是Arch Linux, Windows Manage, Default），选择你要进入的系统就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;最近新入手一台Thinkpad,使用UEFI+GPT预安装好了Win10操作系统，准备开始安装Archlinux。&lt;
      
    
    </summary>
    
    
      <category term="archlinux" scheme="http://hcaijin.com/tags/archlinux/"/>
    
      <category term="windows" scheme="http://hcaijin.com/tags/windows/"/>
    
      <category term="uefi" scheme="http://hcaijin.com/tags/uefi/"/>
    
  </entry>
  
  <entry>
    <title>Chromium OS源码编译、U盘安装及使用笔记</title>
    <link href="http://hcaijin.com/chromium-os-install/"/>
    <id>http://hcaijin.com/chromium-os-install/</id>
    <published>2018-06-02T15:41:10.000Z</published>
    <updated>2018-06-04T16:45:47.250Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>根据官方文档 <a href="https://www.chromium.org/chromium-os/quick-start-guide" target="_blank" rel="noopener">https://www.chromium.org/chromium-os/quick-start-guide</a> 只有Ubuntu Trusty版本的安装方式写了个ArchLinux的安装方法</p></blockquote><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><ul><li>Arch Linux 4.16.12-1-ARCH</li><li>x86_64 GNU/Linux</li><li>有sudo权限的用户</li></ul><h2 id="基本依赖"><a href="#基本依赖" class="headerlink" title="基本依赖"></a>基本依赖</h2><p>确保有如下包就好了，没有就用<code>pacman -S</code> 安装就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S git-core gitk git-gui subversion curl lvm2 thin-provisioning-tools python-pkg-resources python-virtualenv python-oauth2client</span><br></pre></td></tr></table></figure><h2 id="安装depot-tools"><a href="#安装depot-tools" class="headerlink" title="安装depot_tools"></a>安装depot_tools</h2><p>用git克隆下来就好了,但要注意python的版本，后面会说.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Source/</span><br><span class="line">git clone https://chromium.googlesource.com/chromium/tools/depot_tools</span><br></pre></td></tr></table></figure><p></p><p>确保deport_tools目录在PATH变量里</p><h2 id="sudoers配置"><a href="#sudoers配置" class="headerlink" title="sudoers配置"></a>sudoers配置</h2><p>要设置Chrome操作系统构建环境，应该关闭sudo的tty_tickets选项，因为它与cros_sdk不兼容。执行如下操作：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">cat &gt; ./sudo_editor &lt;&lt;EOF</span><br><span class="line">#!/bin/sh</span><br><span class="line">echo Defaults \!tty_tickets &gt; \$1          # Entering your password in one shell affects all shells </span><br><span class="line">echo Defaults timestamp_timeout=180 &gt;&gt; \$1 # Time between re-requesting your password, in minutes</span><br><span class="line">EOF</span><br><span class="line">chmod +x ./sudo_editor </span><br><span class="line">sudo EDITOR=./sudo_editor visudo -f /etc/sudoers.d/relax_requirements</span><br></pre></td></tr></table></figure><p></p><h1 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h1><p>创建一个目录来保存源文件“${SOURCE_REPO}”。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export SOURCE_REPO=&quot;~/Source/chromiumos&quot;</span><br><span class="line">mkdir $&#123;SOURCE_REPO&#125;</span><br><span class="line">cd $&#123;SOURCE_REPO&#125;</span><br><span class="line">virtualenv -p /usr/bin/python2 venv#这里我们要把python环境切换为2.7，才能使用下面的repo</span><br><span class="line">repo init -u https://chromium.googlesource.com/chromiumos/manifest.git</span><br><span class="line"></span><br><span class="line"># Optional: Make any changes to .repo/local_manifests/local_manifest.xml before syncing</span><br><span class="line">repo sync</span><br></pre></td></tr></table></figure><p></p><h1 id="创建chromiumos"><a href="#创建chromiumos" class="headerlink" title="创建chromiumos"></a>创建chromiumos</h1><h2 id="构建包"><a href="#构建包" class="headerlink" title="构建包"></a>构建包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export BOARD=amd64-generic</span><br><span class="line">cros_sdk -- ./build_packages --board=$&#123;BOARD&#125;</span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cros_sdk -- ./build_image --board=$&#123;BOARD&#125;</span><br></pre></td></tr></table></figure><h2 id="烧入USB"><a href="#烧入USB" class="headerlink" title="烧入USB"></a>烧入USB</h2><p>键入 <code>sudo fdisk -l</code> 查看插入U盘所在区域，然后执行如下操作烧录编译的系统到U盘<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cros_sdk -- cros flash usb:///dev/sdd ~/chromiumos/src/build/images/amd-generic/latest/chromiumos_test_image.bin</span><br></pre></td></tr></table></figure><p></p><h2 id="修改分区"><a href="#修改分区" class="headerlink" title="修改分区"></a>修改分区</h2><p>如果要使用自定义大小容量的分区构建镜像，请考虑在 build_library/legacy_disk_layout.json 中添加新的磁盘布局或使用 adjust_part。请参阅下面的帮助，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adjust_part =&apos;STATE：1G&apos; ---- 将1GB添加到状态分区</span><br><span class="line">adjust_part =&apos;ROOT-A：-1G&apos; ---- 从主rootfs分区中删除1GB</span><br><span class="line">adjust_part =&apos;STATE：= 1G&apos; --- 设置状态分区为1GB</span><br></pre></td></tr></table></figure><p>这里键入 <code>cros_sdk -- ./build_image --board=${BOARD} --noenable_rootfs_verification test --adjust_part=&#39;STATE:+10G&#39;</code>，这样我们的Chromium OS用户空间便增加10G，如果使用默认设置你会发现用户空间容量不足（约140MB）</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>修改要安装到目标机器的bios启动项为U盘启动，插入U盘，启动。</p><p>进入系统，按Ctrl + Alt + Back（F2）。在提示符下输入chronos并使用以下命令进行安装。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/chromeos-install</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;根据官方文档 &lt;a href=&quot;https://www.chromium.org/chromium-os/quick-start-guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.chromium.o
      
    
    </summary>
    
    
      <category term="archlinux" scheme="http://hcaijin.com/tags/archlinux/"/>
    
      <category term="ChromiumOS" scheme="http://hcaijin.com/tags/ChromiumOS/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 内核更新 修复无线模块rtl8821ce编译失败的问题</title>
    <link href="http://hcaijin.com/kernel-upgrade-fix-rtl8821ce/"/>
    <id>http://hcaijin.com/kernel-upgrade-fix-rtl8821ce/</id>
    <published>2018-05-18T17:36:07.000Z</published>
    <updated>2018-05-18T19:49:43.774Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近更新系统，内核从4.15 更新到了 4.16.9发现原来的无线模块编译不通过，找不到头文件stdarg.h</p></blockquote><h1 id="查看无线驱动信息"><a href="#查看无线驱动信息" class="headerlink" title="查看无线驱动信息"></a>查看无线驱动信息</h1><p>通过<code>ip l</code>可以看到只有有线网卡<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: enp3s0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc fq_codel state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 8c:16:45:3f:68:0d brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><p></p><p>查看无线网卡驱动，找到相应的驱动去下载就好了<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep -i &apos;newwork&apos;</span><br><span class="line"></span><br><span class="line">Network controller: Realtek Semiconductor Co., Ltd. RTL8821CE 802.11ac PCIe Wireless Network Adapter</span><br></pre></td></tr></table></figure><p></p><h1 id="下载无线驱动源码"><a href="#下载无线驱动源码" class="headerlink" title="下载无线驱动源码"></a>下载无线驱动源码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/endlessm/linux</span><br></pre></td></tr></table></figure><p>由于这个项目特别的大，这里只需要下载drivers/net/wireless/rtl8821ce</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><h2 id="修改Makefile"><a href="#修改Makefile" class="headerlink" title="修改Makefile"></a>修改Makefile</h2><p>这里需要修改Makefile中TopDIR变量的值为当前路径，否则会提示错误退出<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd drivers/net/wireless/rtl8821ce</span><br><span class="line">sed -i &apos;s/export TopDIR ?=/export TopDIR ?= $(shell pwd)/g&apos; Makefile</span><br></pre></td></tr></table></figure><p></p><h2 id="执行make"><a href="#执行make" class="headerlink" title="执行make"></a>执行<code>make</code></h2><p>在最新的内核版本（4.16.9-1-ARCH）下编译失败，提示如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graz@graz ~/Source/driver_net_wireless/rtl8821ce % make</span><br><span class="line">/usr/bin/make ARCH=x86_64 CROSS_COMPILE= -C /lib/modules/4.16.9-1-ARCH/build M=/home/graz/Source/driver_net_wireless/rtl8821ce  modules</span><br><span class="line">make[1]: Entering directory &apos;/usr/lib/modules/4.16.9-1-ARCH/build&apos;</span><br><span class="line">  CC [M]  /home/graz/Source/driver_net_wireless/rtl8821ce/core/rtw_cmd.o</span><br><span class="line">In file included from ./include/linux/list.h:9,</span><br><span class="line">                 from ./include/linux/module.h:9,</span><br><span class="line">                 from /home/graz/Source/driver_net_wireless/rtl8821ce/include/basic_types.h:81,</span><br><span class="line">                 from /home/graz/Source/driver_net_wireless/rtl8821ce/include/drv_types.h:31,</span><br><span class="line">                 from /home/graz/Source/driver_net_wireless/rtl8821ce/core/rtw_cmd.c:22:</span><br><span class="line">./include/linux/kernel.h:6:10: fatal error: stdarg.h: No such file or directory</span><br><span class="line"> #include &lt;stdarg.h&gt;</span><br><span class="line">          ^~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure><p></p><p>通过<code>locate stdarg.h</code>找到头文件 “/usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stdarg.h”<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/lib/gcc/x86_64-pc-linux-gnu/8.1.0/include/stdarg.h include/</span><br></pre></td></tr></table></figure><p></p><p>软链接创建好后，就可以执行<code>make</code>编译成功</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br><span class="line">modprobe 8821ce</span><br></pre></td></tr></table></figure><p>最后，没有报错的话，通过<code>ip l</code> 就可以找到这个无线网卡了<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: enp3s0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc fq_codel state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 8c:16:45:3f:68:0d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: wlp5s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DORMANT group default qlen 1000</span><br><span class="line">    link/ether 70:c9:4e:d8:6d:01 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;最近更新系统，内核从4.15 更新到了 4.16.9发现原来的无线模块编译不通过，找不到头文件stdarg.h&lt;/p&gt;&lt;/blockquote&gt;&lt;h1 id=&quot;查看无线驱动信息&quot;&gt;&lt;a href=&quot;#查看无线驱动信息&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="linux" scheme="http://hcaijin.com/tags/linux/"/>
    
      <category term="rtl8821ce" scheme="http://hcaijin.com/tags/rtl8821ce/"/>
    
  </entry>
  
  <entry>
    <title>博客系统从ghost 迁移hexo 安装与配置</title>
    <link href="http://hcaijin.com/hexo-install/"/>
    <id>http://hcaijin.com/hexo-install/</id>
    <published>2018-05-06T08:33:21.000Z</published>
    <updated>2018-05-06T16:13:00.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="备份Ghost"><a href="#备份Ghost" class="headerlink" title="备份Ghost"></a>备份Ghost</h1><p>后台export，导出后是一个JSON，包含所有文章以及一些元数据：修改日期、Tags 等等</p><p>图片等资源，可以到 assets 文件夹下，打包下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/www/ghost</span><br><span class="line">tar -zcvf images.tag assets/content</span><br></pre></td></tr></table></figure><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S npm</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">cd /data/www/</span><br><span class="line">hexo init hcaijin.com</span><br><span class="line">cd hcaijin.com</span><br><span class="line">hexo install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h1 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h1><h2 id="导入Ghost数据"><a href="#导入Ghost数据" class="headerlink" title="导入Ghost数据"></a>导入Ghost数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 安装数据转换插件</span><br><span class="line">npm install hexo-migrator-ghost --save</span><br><span class="line"></span><br><span class="line">## 导入数据</span><br><span class="line">hexo migrate ghost ghost-export.json</span><br></pre></td></tr></table></figure><h2 id="导入图片"><a href="#导入图片" class="headerlink" title="导入图片"></a>导入图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp images.tag /data/www/hcaijin.com/source/</span><br><span class="line">cd /data/www/hcaijin.com/source/</span><br><span class="line">tar -zxvf images.tag</span><br></pre></td></tr></table></figure><h1 id="最后，做一些必要的配置"><a href="#最后，做一些必要的配置" class="headerlink" title="最后，做一些必要的配置"></a>最后，做一些必要的配置</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><ul><li><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">Hexo 配置</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT 配置</a></li><li><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">NexT 高级配置</a></li></ul><h2 id="安装其他插件"><a href="#安装其他插件" class="headerlink" title="安装其他插件"></a>安装其他插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save                                                       </span><br><span class="line">npm install hexo-generator-sitemap --save                                                        </span><br><span class="line">npm install hexo-generator-feed --save                                                           </span><br><span class="line">npm install hexo-pwa --save                                                                      </span><br><span class="line">npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;备份Ghost&quot;&gt;&lt;a href=&quot;#备份Ghost&quot; class=&quot;headerlink&quot; title=&quot;备份Ghost&quot;&gt;&lt;/a&gt;备份Ghost&lt;/h1&gt;&lt;p&gt;后台export，导出后是一个JSON，包含所有文章以及一些元数据：修改日期、Tags 等等&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="ghost" scheme="http://hcaijin.com/tags/ghost/"/>
    
      <category term="hexo" scheme="http://hcaijin.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hcaijin.com/hello-world/"/>
    <id>http://hcaijin.com/hello-world/</id>
    <published>2018-05-05T13:41:24.601Z</published>
    <updated>2018-05-05T13:41:24.601Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ghost 更新记录</title>
    <link href="http://hcaijin.com/ghost-upgrade/"/>
    <id>http://hcaijin.com/ghost-upgrade/</id>
    <published>2017-05-06T04:33:21.000Z</published>
    <updated>2018-05-06T08:39:08.709Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有更新ghost 0.6.0，今天更新的时候发现最新版本，0.11.11 版本 更新安装的时候报错。</p><p>查看error日志，是依赖的npm和node版本问题。解决方法就是要么升级npm,node，要么降级ghost到npm,node支持的版本。</p><ul><li><p>升级npm,node在这里就不说了，网上有很多的方法，我用的是搬瓦工家的最便宜vps，使用的npm,node不好升级，估计还得升级linux内核，我就不打算使用这个方法了。</p></li><li><p>降级ghost到npm,node支持的版本。<br>我们到<a href="https://github.com/TryGhost/Ghost/releases" target="_blank" rel="noopener">Ghost各版本历史</a>去找一下历史版本，我尝试了几个版本，最后确定0.8.0这个版本是可以正常使用的。</p></li></ul><blockquote><p>这样我们就可以开始升级ghost了。升级ghost不需要停了当前的服务，但是，升级更新都要做好备份。</p></blockquote><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>登陆并进入https://$HOSTNAME/ghost/debug这个页面导出备份。</p><p>最好能登陆到服务器进入ghost安装的目录备份一下根目录下的content，这一步要先暂停服务。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/www/ghost</span><br><span class="line">tar -zcvf ghost-content.tag content</span><br></pre></td></tr></table></figure><p></p><blockquote><p>备份好以后，我们就可以删除与升级相关的目录了文件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf core/ node_modules/ index.js *.json</span><br></pre></td></tr></table></figure><h3 id="下载最新版本"><a href="#下载最新版本" class="headerlink" title="下载最新版本"></a>下载最新版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LOk https://github.com/TryGhost/Ghost/releases/download/0.8.0/Ghost-0.8.0.zip</span><br></pre></td></tr></table></figure><p>然后解压到/data/www/ghost<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">unzip -uo Ghost-0.8.0.zip -d /data/www/ghost</span><br></pre></td></tr></table></figure><p></p><h3 id="安装并重启"><a href="#安装并重启" class="headerlink" title="安装并重启"></a>安装并重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clear &amp;&amp; npm install --production</span><br></pre></td></tr></table></figure><p>没有报错的话就是安装成功了。</p><p>重启ghost<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=production pm2 start index.js --name &quot;ghost&quot;</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没有更新ghost 0.6.0，今天更新的时候发现最新版本，0.11.11 版本 更新安装的时候报错。&lt;/p&gt;&lt;p&gt;查看error日志，是依赖的npm和node版本问题。解决方法就是要么升级npm,node，要么降级ghost到npm,node支持的版本。&lt;/p&gt;&lt;ul
      
    
    </summary>
    
    
      <category term="ghost" scheme="http://hcaijin.com/tags/ghost/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统Chrome,Firefox程序无用使用Fcitx的问题解决方法</title>
    <link href="http://hcaijin.com/linux-xi-tong-chromefirefoxcheng-xu-wu-yong-shi-yong-fcitxde-wen-ti-jie-jue-fang-fa/"/>
    <id>http://hcaijin.com/linux-xi-tong-chromefirefoxcheng-xu-wu-yong-shi-yong-fcitxde-wen-ti-jie-jue-fang-fa/</id>
    <published>2016-12-24T21:04:29.000Z</published>
    <updated>2017-01-08T14:16:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>使用的gentoo有半年没有更新系统了，原来用的好好的输入法，更新完以后，在其他的程序都可以正常使用fcitx。但是，在chrome,firefox（后来知道应该是GTK,QT相关的程序用了最新版导致的问题）就是用不了，网上也有很多人提问，也没有一个有效的解决方法。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Linux hcj-arch 4.4.39-1-lts #1 SMP Thu Dec 15 21:10:18 CET 2016 x86_64 GNU/Linu</li><li>fcitx version: 4.2.9.1</li><li>Google Chrome 55.0.2883.87</li><li>Mozilla Firefox 50.1.0</li></ul><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><p>首先保证环境变量有设置，当然，如果其他程序都可以使用，那这个应该是没有问题的<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx </span><br><span class="line">export QT_IM_MODULE=fcitx </span><br><span class="line">export XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure><p></p><p>主要的问题就是我们要用命令 <code>fcitx-diagnose</code> 查看fcitx的相关模块是不是有安装。（更无脑的方式就是把这个命令里显示为红色的信息都看一遍，把相关的模块安装上就ok了）</p><p>那么，我们可以看到：<br><img src="/content/images/2017/01/Screenshot_2016-12-27_10-51-56.png" alt=""></p><p><img src="/content/images/2017/01/Screenshot_2016-12-27_10-52-09.png" alt=""></p><p>== 如上图所示，缺少gtk2,gtk3相关的模块支持，导致的Chrome,Firefox等gtk软件无法使用输入法的情况 ==</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>我们先看一下fcitx构建时用到的USE标记，以下<br><img src="/content/images/2017/01/Screenshot_2017-01-09_11-06-32.png" alt=""><br>可以看到，我自己设置的是默认不安装gtk支持的，所以我们要加上，有以下两种方法：</p><ul><li>可以直接在/etc/portage/make.conf USE标记上加上gtk的支持</li><li>直接定义USE标记，加上gtk的支持<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE=&quot;X autostart cairo dbus enchant introspection nls pango qt4 table xml -debug gtk2 gtk3 -lua -opencc -static-libs &#123;-test&#125;&quot; sudo emerge fcitx</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>最后，重新编译安装过fcitx以后，再看一下<code>fcitx-diagnose</code>，只要没有红色相关字体的警告信息，就说明已经可以正常使用了。把浏览器重启一下，如果还不行，得重启一下系统。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;使用的gentoo有半年没有更新系统了，原来用的好好的输入法，更新完以后，在其他的程序都可以正常使用fcitx。但是，在chrome,fir
      
    
    </summary>
    
    
      <category term="linux" scheme="http://hcaijin.com/tags/linux/"/>
    
      <category term="chrome" scheme="http://hcaijin.com/tags/chrome/"/>
    
      <category term="firefox" scheme="http://hcaijin.com/tags/firefox/"/>
    
      <category term="fcitx" scheme="http://hcaijin.com/tags/fcitx/"/>
    
  </entry>
  
  <entry>
    <title>Linux挂载Mac系统下的dmg文件</title>
    <link href="http://hcaijin.com/linuxgua-zai-mac-xi-tong-xia-de-dmgwen-jian/"/>
    <id>http://hcaijin.com/linuxgua-zai-mac-xi-tong-xia-de-dmgwen-jian/</id>
    <published>2016-05-26T21:06:32.000Z</published>
    <updated>2016-05-26T22:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近想在virtualbox下安装Mac系统，了解到Mac的安装镜像文件是dmg格式的，并下载到了 Install OS X Yosemite 10.10.1.dmg 安装包。</p></blockquote><h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><p>本来以为Mac的安装与其他系统的类似，只要把镜像包在虚拟机中做为cd启动就可以了，然而并没什么用 - -</p><p>这不，想到把dmg格式的包转化为iso的格式再在虚拟机中启动，这就有了这篇文章的问题了。</p><p>google到这个工具acetoneiso可以直接把dmg格式的转为iso</p><p>但是，我想是不是可以用更简单的方法来操作。<br>现在的dmg一般都使用(zlib 或者 bzip2压缩算法)压缩过</p><p>需要使用dmg2img把dmg文件转为img<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dmg2img Install\ OS\ X\ Yosemite\ 10.10.1.dmg yosemite.img</span><br></pre></td></tr></table></figure><p></p><p>提示如，就表示成功了：<br>Archive successfully decompressed as yosemite.img</p><h2 id="检查模块"><a href="#检查模块" class="headerlink" title="检查模块"></a>检查模块</h2><p>在挂载之前我们要先确保hfsplus模块启用：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep hfs</span><br></pre></td></tr></table></figure><p></p><p>如果没有输出，就表示模块未启用，使用如下命令启用：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe hfsplus</span><br></pre></td></tr></table></figure><p></p><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p>启用成功后，就可以用mount挂载img，这里我挂载失败，提示存在坏道，在<a href="http://www.linuxquestions.org/questions/linux-software-2/how-to-mount-dos-img-file-4175430554/" target="_blank" rel="noopener">这里</a>才找到了解决的方法。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mount -t hfsplus -o loop my.img /mnt/hfs</span><br><span class="line"></span><br><span class="line">mount: wrong fs type, bad option, bad superblock on /dev/loop0,</span><br><span class="line">       missing codepage or helper program, or other error</span><br><span class="line">       In some cases useful info is found in syslog - try</span><br><span class="line">       dmesg | tail or so</span><br></pre></td></tr></table></figure><p></p><h3 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h3><p>查询系统日志在最下面提示如下信息：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dmesg | tail </span><br><span class="line">[2015609.436682] hfsplus: unable to find HFS+ superblock</span><br></pre></td></tr></table></figure><p></p><p>解决方案：</p><p>1.先用fdisk查询img扇区<br><img src="/content/images/2016/05/--_2016-05-27_17-42-21.png" alt=""><br>可以看到它有两个设备<em>.img1,</em>.img2</p><p>2.把img的文件挂载出来就得找到开始挂载的起始扇区，所以要设置一下offset的值，<br>这里<code>offset=1259643×512</code>，运行以下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t hfsplus -v -o loop,offset=644937216 yosemite.img /mnt/hfs</span><br></pre></td></tr></table></figure><p></p><p>以上，就可以把镜像挂载到了目录/mnt/hfs下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;最近想在virtualbox下安装Mac系统，了解到Mac的安装镜像文件是dmg格式的，并下载到了 Install OS X Yosemite 10.10.1.dmg 安装包。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;解压缩&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="linux" scheme="http://hcaijin.com/tags/linux/"/>
    
      <category term="mount" scheme="http://hcaijin.com/tags/mount/"/>
    
      <category term="mac" scheme="http://hcaijin.com/tags/mac/"/>
    
      <category term="virtualbox" scheme="http://hcaijin.com/tags/virtualbox/"/>
    
  </entry>
  
  <entry>
    <title>idea tomcat 启动web应用异常处理</title>
    <link href="http://hcaijin.com/idea-tomcat-qi-dong-webying-yong-yi-chang-chu-li/"/>
    <id>http://hcaijin.com/idea-tomcat-qi-dong-webying-yong-yi-chang-chu-li/</id>
    <published>2016-05-10T21:28:04.000Z</published>
    <updated>2016-05-10T21:36:39.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2016-05-11 16:36:25.799 [RMI TCP Connection(4)-127.0.0.1] ERROR org.springframework.web.context.ContextLoader - Context initialization failed</span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;shiroFilter&apos; defined in file [/home/hcj/Work/data/ecerp-saas/Sources/ecerp/out/artifacts/ecerp_web_war_exploded/WEB-INF/classes/spring/applicationContext.xml]: Cannot resolve reference to bean &apos;securityManager&apos; while setting bean property &apos;securityManager&apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;securityManager&apos; defined in file [/home/hcj/Work/data/ecerp-saas/Sources/ecerp/out/artifacts/ecerp_web_war_exploded/WEB-INF/classes/spring/applicationContext.xml]: Cannot resolve reference to bean &apos;shiroSubjectFactory&apos; while setting bean property &apos;subjectFactory&apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;shiroSubjectFactory&apos;: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: private gy.erp.service.admin.SecurityMonitor gy.erp.shiro.ShiroSubjectFactory.securityMonitor; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;securityMonitor&apos; defined in class path resource [spring-domain.xml]: Cannot resolve reference to bean &apos;sessionService&apos; while setting bean property &apos;sessionService&apos;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;sessionService&apos;: FactoryBean threw exception on object creation; nested exception is java.lang.IllegalArgumentException: Invalid registry store file /data/erp.guanyisoft.com/tomcat/ecerp-web.properties, cause: Failed to create directory /data/erp.guanyisoft.com/tomcat!</span><br><span class="line">at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:329) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1391) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) ~[spring-beans-3.2.0.RELEASE.jar:3.2.0.RELEASE]</span><br><span class="line">at org.</span><br></pre></td></tr></table></figure><p>java报错总要看异常信息，以上主要关键的地方列在这里：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;nested exception is java.lang.IllegalArgumentException: Invalid registry store file /data/erp.guanyisoft.com/tomcat/ecerp-web.properties, cause: Failed to create directory /data/erp.guanyisoft.com/tomcat!</span><br></pre></td></tr></table></figure><p></p><p>idea tomcat 在启动web应用的时候会生成一个注册dubbo服务的文件，需要指定生成路径，以前项目都是默认生成在out文件里的吧，最近，不知道什么变动，需要手工在项目配置文件application.properties 指定一下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo.registry.file = /home/hcj/Work/data/ecerp-web.properties</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="java" scheme="http://hcaijin.com/tags/java/"/>
    
      <category term="tomcat" scheme="http://hcaijin.com/tags/tomcat/"/>
    
      <category term="idea" scheme="http://hcaijin.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Linux 声卡驱动问题</title>
    <link href="http://hcaijin.com/linux-sheng-qia-qu-dong-wen-ti/"/>
    <id>http://hcaijin.com/linux-sheng-qia-qu-dong-wen-ti/</id>
    <published>2016-03-20T17:54:57.000Z</published>
    <updated>2016-03-21T03:19:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近转Gentoo，一切安装就绪了，但是想使用youtube观看视频的时候，竟没有声音，估计又得折腾一下了。</p></blockquote><p>（Advanced Linux Sound Architecture，ALSA）是Linux中提供声音设备驱动的内核组件，用来代替原来的开放声音系统（Open Sound System，OSSv3）。</p><ul><li>系统环境：Linux hcj.com 4.1.15-gentoo-r1</li><li>组件：alsa</li><li>前提：内核已经配置支持</li></ul><h3 id="硬件设备显示"><a href="#硬件设备显示" class="headerlink" title="硬件设备显示"></a>硬件设备显示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep -i audio</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/--_2016-03-21_22-46-22.png" alt=""></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">euse -E alsa</span><br><span class="line">emerge --ask --changed-use --deep @world</span><br><span class="line">emerge --ask alsa-utils</span><br></pre></td></tr></table></figure><h3 id="启动声音服务"><a href="#启动声音服务" class="headerlink" title="启动声音服务"></a>启动声音服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/alsasound start</span><br><span class="line">rc-update add alsasound boot      ###声音服务设置boot级别</span><br></pre></td></tr></table></figure><h3 id="列出设备名"><a href="#列出设备名" class="headerlink" title="列出设备名"></a>列出设备名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/class/sound/card*/id</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/--_2016-03-22_07-16-34.png" alt=""></p><h3 id="配置默认设备"><a href="#配置默认设备" class="headerlink" title="配置默认设备"></a>配置默认设备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.asoundrc</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/--_2016-03-22_07-17-59.png" alt=""></p><p>最后，别忘了重启一下。</p><p><a href="https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture" target="_blank" rel="noopener">参考链接1</a></p><p><a href="https://wiki.gentoo.org/wiki/ALSA" target="_blank" rel="noopener">参考链接2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;最近转Gentoo，一切安装就绪了，但是想使用youtube观看视频的时候，竟没有声音，估计又得折腾一下了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;（Advanced Linux Sound Architecture，ALSA）是Linux中提供声音
      
    
    </summary>
    
    
      <category term="linux" scheme="http://hcaijin.com/tags/linux/"/>
    
      <category term="alsamixer" scheme="http://hcaijin.com/tags/alsamixer/"/>
    
  </entry>
  
  <entry>
    <title>Gentoo安装RTL8723BE无线网卡驱动</title>
    <link href="http://hcaijin.com/an-zhuang-rtl8723bewu-xian-wang-qia-qu-dong/"/>
    <id>http://hcaijin.com/an-zhuang-rtl8723bewu-xian-wang-qia-qu-dong/</id>
    <published>2016-03-16T23:40:43.000Z</published>
    <updated>2016-03-17T00:43:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>新配了个ThinkPad E55c 安装Gentoo时无线网卡没能正确识别。网上查了一下是3.15内核版本之前还没有包含这个驱动，需要手动安装一下。但是我想说我安装的内核版本是4.1,而且也安装了linux-firmware固件，可是怎么就没有这个驱动呢 - - 暂时先不深究。</p></blockquote><ul><li>内核版本：Kernel: x86_64 Linux 4.1.15-gentoo-r1</li><li>网卡型号：RTL8723BE</li></ul><h3 id="确认网卡型号"><a href="#确认网卡型号" class="headerlink" title="确认网卡型号"></a>确认网卡型号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci -k | grep Network</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/--_2016-03-18_04-16-28.png" alt=""></p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/lwfinger/rtlwifi_new.git</span><br><span class="line">cd rtlwifi_new/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="手动加载模块"><a href="#手动加载模块" class="headerlink" title="手动加载模块"></a>手动加载模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">modprobe rtl8723be        ## 手动加载rtl8723be模块</span><br><span class="line">modinfo rtl8723be         ## 查看模块详情</span><br></pre></td></tr></table></figure><p>模块加载成功，使用<code>lspci -k</code>看一下,如果显示的是如下图说明无线网卡驱动安装成功：<br><img src="/content/images/2016/03/--_2016-03-18_04-17-37.png" alt=""><br>最后<code>ip addr show</code>可以看到对应的网卡设备了<br><img src="/content/images/2016/03/--_2016-03-18_04-30-58.png" alt=""></p><h3 id="自启动加载模块"><a href="#自启动加载模块" class="headerlink" title="自启动加载模块"></a>自启动加载模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/conf.d/modules</span><br><span class="line">modules=&quot;rtl8723be&quot;</span><br></pre></td></tr></table></figure><p><a href="https://wiki.archlinux.org/index.php/Wireless_network_configuration" target="_blank" rel="noopener">引用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;新配了个ThinkPad E55c 安装Gentoo时无线网卡没能正确识别。网上查了一下是3.15内核版本之前还没有包含这个驱动，需要手动安装一下。但是我想说我安装的内核版本是4.1,而且也安装了linux-firmware固件，可是怎么就没有这个驱
      
    
    </summary>
    
    
      <category term="linux" scheme="http://hcaijin.com/tags/linux/"/>
    
      <category term="Gentoo" scheme="http://hcaijin.com/tags/Gentoo/"/>
    
      <category term="rtl8723be" scheme="http://hcaijin.com/tags/rtl8723be/"/>
    
  </entry>
  
  <entry>
    <title>git常规使用</title>
    <link href="http://hcaijin.com/gitshi-yong/"/>
    <id>http://hcaijin.com/gitshi-yong/</id>
    <published>2016-03-14T18:21:09.000Z</published>
    <updated>2016-03-27T14:20:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="远程仓库有master和dev分支"><a href="#远程仓库有master和dev分支" class="headerlink" title="远程仓库有master和dev分支"></a>远程仓库有master和dev分支</h3><h4 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;git url&gt;</span><br></pre></td></tr></table></figure><h4 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --all</span><br></pre></td></tr></table></figure><blockquote><p>默认有了dev和master分支，所以会看到如下三个分支</p></blockquote><ul><li>master[本地主分支]</li><li>origin/master[远程主分支]</li><li>origin/dev[远程开发分支]</li></ul><p>==新克隆下来的代码默认master和origin/master是关联的，也就是他们的代码保持同步，但是origin/dev分支在本地没有任何的关联，所以我们无法在那里开发==</p><h4 id="创建本地关联origin-dev的分支"><a href="#创建本地关联origin-dev的分支" class="headerlink" title="创建本地关联origin/dev的分支"></a>创建本地关联origin/dev的分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev origin/dev</span><br></pre></td></tr></table></figure><p>创建本地分支dev，并且和远程origin/dev分支关联，本地dev分支的初始代码和远程的dev分支代码一样</p><h4 id="切换到dev分支进行开发"><a href="#切换到dev分支进行开发" class="headerlink" title="切换到dev分支进行开发"></a>切换到dev分支进行开发</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev  # 这个是切换到dev分支，然后就是常规的开发</span><br></pre></td></tr></table></figure><h3 id="假设远程仓库只有mater分支"><a href="#假设远程仓库只有mater分支" class="headerlink" title="假设远程仓库只有mater分支"></a>假设远程仓库只有mater分支</h3><h4 id="克隆代码-1"><a href="#克隆代码-1" class="headerlink" title="克隆代码"></a>克隆代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;git url&gt;</span><br></pre></td></tr></table></figure><h4 id="查看所有分支-1"><a href="#查看所有分支-1" class="headerlink" title="查看所有分支"></a>查看所有分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --all</span><br></pre></td></tr></table></figure><blockquote><p>默认只有master分支，所以会看到如下两个分支</p></blockquote><ul><li>master[本地主分支]</li><li>origin/master[远程主分支]</li></ul><p>==新克隆下来的代码默认master和origin/master是关联的，也就是他们的代码保持同步==</p><h4 id="创建本地新的dev分支"><a href="#创建本地新的dev分支" class="headerlink" title="创建本地新的dev分支"></a>创建本地新的dev分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch dev  # 创建本地分支</span><br><span class="line">git branch  # 查看分支</span><br></pre></td></tr></table></figure><p>这时会看到master和dev，而且master上会有一个星号<br>这个时候dev是一个本地分支，远程仓库不知道它的存在<br>本地分支可以不同步到远程仓库，我们可以在dev开发，然后merge到master，使用master同步代码，当然也可以同步</p><h4 id="发布dev分支"><a href="#发布dev分支" class="headerlink" title="发布dev分支"></a>发布dev分支</h4><p>发布dev分支指的是同步dev分支的代码到远程服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin dev:dev  # 这样远程仓库也有一个dev分支了</span><br></pre></td></tr></table></figure><h4 id="在dev分支开发代码"><a href="#在dev分支开发代码" class="headerlink" title="在dev分支开发代码"></a>在dev分支开发代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev  # 切换到dev分支进行开发</span><br></pre></td></tr></table></figure><blockquote><p>开发代码之后，我们有两个选择</p></blockquote><ul><li>第一个：如果功能开发完成了，可以合并主分支</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout master  # 切换到主分支</span><br><span class="line">git merge dev  # 把dev分支的更改和master合并</span><br><span class="line">git push  # 提交主分支代码远程</span><br><span class="line">git checkout dev  # 切换到dev远程分支</span><br><span class="line">git push  # 提交dev分支到远程</span><br></pre></td></tr></table></figure><ul><li>第二个：如果功能没有完成，可以直接推送</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push  # 提交到dev远程分支</span><br></pre></td></tr></table></figure><p>== 注意：在分支切换之前最好先commit全部的改变，除非你真的知道自己在做什么 ==</p><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :dev  # 删除远程dev分支，危险命令哦</span><br></pre></td></tr></table></figure><blockquote><p>下面两条是删除本地分支</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master  # 切换到master分支</span><br><span class="line">git branch -d dev  # 删除本地dev分支</span><br></pre></td></tr></table></figure><h4 id="progit-pdf"><a href="#progit-pdf" class="headerlink" title="progit.pdf"></a>progit.pdf</h4><p>书籍格式和语言：中文、英文、PDF、ePub<br>下载地址：<a href="http://git-scm.com/book" target="_blank" rel="noopener">http://git-scm.com/book</a></p><p><a href="https://www.zhihu.com/question/21995370/answer/19975870" target="_blank" rel="noopener">转载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;远程仓库有master和dev分支&quot;&gt;&lt;a href=&quot;#远程仓库有master和dev分支&quot; class=&quot;headerlink&quot; title=&quot;远程仓库有master和dev分支&quot;&gt;&lt;/a&gt;远程仓库有master和dev分支&lt;/h3&gt;&lt;h4 id=&quot;克隆代码&quot;
      
    
    </summary>
    
    
      <category term="git" scheme="http://hcaijin.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ss-redir 的 iptables 配置(透明代理)</title>
    <link href="http://hcaijin.com/ss-redir-de-iptables-pei-zhi-tou-ming-dai-li/"/>
    <id>http://hcaijin.com/ss-redir-de-iptables-pei-zhi-tou-ming-dai-li/</id>
    <published>2016-03-09T00:22:01.000Z</published>
    <updated>2016-03-25T22:51:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>透明代理指对客户端透明，客户端不需要进行任何设置就使用了网管设置的代理规则<br>创建</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/ss-redir.json 本地监听 1080 运行ss-redir -v -c /etc/ss-redir.json</span><br></pre></td></tr></table></figure><h3 id="NAT表配置脚本"><a href="#NAT表配置脚本" class="headerlink" title="NAT表配置脚本"></a>NAT表配置脚本</h3><p>基本配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -N SHADOWSOCKS</span><br><span class="line"></span><br><span class="line"># 在 nat 表中创建新链</span><br><span class="line">iptables -t nat -A SHADOWSOCKS -p tcp --dport 23596 -j RETURN</span><br><span class="line"></span><br><span class="line"># 23596 是 ss 代理服务器的端口，即远程 shadowsocks 服务器提供服务的端口，如果你有多个 ip 可用,但端口一致，就设置这个</span><br><span class="line"></span><br><span class="line">iptables -t nat -A SHADOWSOCKS -d 123.456.789.111 -j RETURN</span><br><span class="line"># 123.456.789.111 是 ss 代理服务器的 ip, 如果你只有一个 ss服务器的 ip，却能选择不同端口,就设置此条</span><br><span class="line"></span><br><span class="line">iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t nat -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN</span><br><span class="line">iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN</span><br><span class="line">iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN</span><br><span class="line">iptables -t nat -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t nat -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN</span><br><span class="line"></span><br><span class="line">iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-ports 1080</span><br><span class="line"># 1080 是 ss-redir 的监听端口,ss-local 和 ss-redir 的监听端口不同,配置文件不同</span><br></pre></td></tr></table></figure><p>最后是应用上面的规则,将OUTPUT出去的tcp流量全部经过SOCKS链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#如果是在openwrt上实现透明代理的话,使用下面被注释了的规则</span><br><span class="line"></span><br><span class="line">iptables -t nat -I PREROUTING -p tcp -j SHADOWSOCKS</span><br><span class="line"># 在 PREROUTING 链前插入 SHADOWSOCKS 链,使其生效</span><br><span class="line"></span><br><span class="line">在个人电脑上使用以下配置</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -j SHADOWSOCKS</span><br></pre></td></tr></table></figure><h3 id="如果要过滤国内流量可以"><a href="#如果要过滤国内流量可以" class="headerlink" title="如果要过滤国内流量可以"></a>如果要过滤国内流量可以</h3><p>列表太长了就不列出来了！</p><h3 id="清除自定义规则"><a href="#清除自定义规则" class="headerlink" title="清除自定义规则"></a>清除自定义规则</h3><p>清空整个链 iptables -F 链名,比如:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -F SHADOWSOCKS</span><br></pre></td></tr></table></figure><p></p><p>删除指定的用户自定义链 iptables -X 链名 比如:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -X SHADOWSOCKS</span><br></pre></td></tr></table></figure><p></p><p>从所选链中删除规则 iptables -D 链名 规则详情 比如:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -D SHADOWSOCKS -d 223.223.192.0/255.255.240.0 -j RETURN</span><br></pre></td></tr></table></figure><p></p><h3 id="解决DNS污染的问题"><a href="#解决DNS污染的问题" class="headerlink" title="解决DNS污染的问题"></a>解决DNS污染的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S archlinuxcn/dnsmasq-china-list-git</span><br><span class="line">$ sudo dnsmasq-update-china-list 114</span><br><span class="line">####脚本如下：</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  114)</span><br><span class="line">    DNS=114.114.114.114</span><br><span class="line">    ;;</span><br><span class="line">  ali)</span><br><span class="line">    DNS=223.5.5.5</span><br><span class="line">    ;;</span><br><span class="line">  cnnic)</span><br><span class="line">    DNS=1.2.4.8</span><br><span class="line">    ;;</span><br><span class="line">  baidu)</span><br><span class="line">    DNS=180.76.76.76</span><br><span class="line">    ;;</span><br><span class="line">  google)</span><br><span class="line">    DNS=8.8.8.8</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    DNS=$1</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">sed -i &quot;s|^\(server.*\)/[^/]*$|\1/$DNS|&quot; /etc/dnsmasq.d/accelerated-domains.china.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;透明代理指对客户端透明，客户端不需要进行任何设置就使用了网管设置的代理规则&lt;br&gt;创建&lt;/p&gt;&lt;/blockquote&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="iptables" scheme="http://hcaijin.com/tags/iptables/"/>
    
      <category term="shadowsocks" scheme="http://hcaijin.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统挂载NTFS移动硬盘</title>
    <link href="http://hcaijin.com/linuxxi-tong-gua-zai-ntfsyi-dong-ying-pan/"/>
    <id>http://hcaijin.com/linuxxi-tong-gua-zai-ntfsyi-dong-ying-pan/</id>
    <published>2016-03-07T18:19:36.000Z</published>
    <updated>2016-03-31T13:33:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工作中，同事之间拷贝数据的时候，由于我用的linux系统无法识别同事的NTFS移动硬盘，这才网上查了一下，原来还得安装一个软件，以下是<a href="http://www.cnblogs.com/kerrycode/archive/2013/04/01/2993701.html" target="_blank" rel="noopener">转载</a>的文章,记录一下。</p></blockquote><hr><p>有时候做大数据量迁移时，为了快速迁移大数据，有可能在Linux服务器上临时挂载NTFS格式的移动硬盘， 一般情况下，Linux是识别不了NTFS格式移动硬盘的（需要重编译Linux核心才能，加挂NTFS分区），这时候为了能让Linux服务器能够识别NTFS的移动硬盘，就必须安装ntfs-3g（Third Generation Read/Write NTFS Driver）的包。</p><hr><p>NTFS-3G介绍<br>NTFS-3G是一个开源项目，NTFS-3G是为Linux, Android, Mac OS X, FreeBSD, NetBSD, OpenSolaris, QNX, Haiku,和其他操作系统提供的一个稳定的，功能齐全，读写NTFS的驱动程序的。它提供了安全处理Windows XP，Windows Server 2003，Windows 2000，Windows Vista，Windows Server 2008和Windows 7操作系统下的NTFS文件系统。</p><p>NTFS-3g是一个开源软件，它支持在Linux下面读写NTFS格式的分区。它非常的快速，同时也很安全。它支持Windows 2000、XP、2003和Vista，并且支持所有的符合POSIX标准的磁盘操作。 ntfs-3g的目的是为了持续的发展，各硬件平台和操作系统的用户需要可靠的互通与支持ntfs的驱动，ntfs-3g可以提供可信任的、功能丰富的高性能解决方案。经过了12年多的发展，ntfs-3g已经逐渐稳定；</p><blockquote><p>资料介绍</p></blockquote><ul><li>官方网址：<a href="http://www.tuxera.com/，" target="_blank" rel="noopener">http://www.tuxera.com/，</a></li><li>文档手册：<a href="http://www.tuxera.com/community/ntfs-3g-manual/" target="_blank" rel="noopener">http://www.tuxera.com/community/ntfs-3g-manual/</a></li><li>下载地址：<a href="http://www.tuxera.com/community/ntfs-3g-download/" target="_blank" rel="noopener">http://www.tuxera.com/community/ntfs-3g-download/</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="解压安装NTFS-3G。"><a href="#解压安装NTFS-3G。" class="headerlink" title="解压安装NTFS-3G。"></a>解压安装NTFS-3G。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf ntfs-3g_ntfsprogs-2012.1.15.tgz　　</span><br><span class="line">cd ntfs-3g_ntfsprogs-2012.1.15</span><br><span class="line">　　./configure </span><br><span class="line">　　make </span><br><span class="line">　　make install</span><br></pre></td></tr></table></figure><p><em>如果没有报错，提示安装成功，下面就可以用ntfs-3g来实现对NTFS分区的读写了</em></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置挂载NTFS格式的移动硬盘"><a href="#配置挂载NTFS格式的移动硬盘" class="headerlink" title="配置挂载NTFS格式的移动硬盘"></a>配置挂载NTFS格式的移动硬盘</h4><h5 id="首先得到NTFS分区的信息"><a href="#首先得到NTFS分区的信息" class="headerlink" title="首先得到NTFS分区的信息"></a>首先得到NTFS分区的信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo fdisk -l | grep NTFS</span><br><span class="line">/dev/sdc1 * 1 244 1955776+ 7 HPFS/NTFS</span><br></pre></td></tr></table></figure><h5 id="设置挂载点，用如下命令实现挂载"><a href="#设置挂载点，用如下命令实现挂载" class="headerlink" title="设置挂载点，用如下命令实现挂载"></a>设置挂载点，用如下命令实现挂载</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t ntfs-3g &lt;NTFS Partition&gt; &lt;Mount Point&gt;</span><br></pre></td></tr></table></figure><blockquote><p>例如得到的NTFS分区信息为/dev/sdc1，挂载点设置在/mnt/usb下:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mount -t ntfs-3g /dev/sdc1 /mnt/usb </span><br><span class="line">########## 或者直接用 #######</span><br><span class="line">$ ntfs-3g ntfs-3g /dev/sdc1 /mnt/usb</span><br></pre></td></tr></table></figure><p></p></blockquote><h4 id="如果想实现开机自动挂载，可以在-etc-fstab里面添加如下格式语句"><a href="#如果想实现开机自动挂载，可以在-etc-fstab里面添加如下格式语句" class="headerlink" title="如果想实现开机自动挂载，可以在/etc/fstab里面添加如下格式语句"></a>如果想实现开机自动挂载，可以在/etc/fstab里面添加如下格式语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;NTFS Partition&gt; &lt;Mount Point&gt; ntfs-3g silent,umask=0,locale=zh_CN.utf8 0 0</span><br></pre></td></tr></table></figure><p>==这样可以实现NTFS分区里中文文件名的显示。 ==</p><p>　　</p><h3 id="卸载分区"><a href="#卸载分区" class="headerlink" title="卸载分区"></a>卸载分区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ umount &lt;NTFS Partition&gt; 　　</span><br><span class="line">##### 或者 #####</span><br><span class="line">$ umount &lt;Mount Point&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;工作中，同事之间拷贝数据的时候，由于我用的linux系统无法识别同事的NTFS移动硬盘，这才网上查了一下，原来还得安装一个软件，以下是&lt;a href=&quot;http://www.cnblogs.com/kerrycode/archive/2013/04/
      
    
    </summary>
    
    
      <category term="linux" scheme="http://hcaijin.com/tags/linux/"/>
    
      <category term="ntfs" scheme="http://hcaijin.com/tags/ntfs/"/>
    
  </entry>
  
  <entry>
    <title>Linux gentoo U盘安装指南</title>
    <link href="http://hcaijin.com/gentoo-upan-an-zhuang-zhi-nan/"/>
    <id>http://hcaijin.com/gentoo-upan-an-zhuang-zhi-nan/</id>
    <published>2016-03-04T17:43:55.000Z</published>
    <updated>2016-03-07T20:23:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>再一次捣鼓gentoo,还是遇到了相当多的麻烦，这里把安装的方法重新在blog里整理一下，跟着官方安装步骤一点点来。</p></blockquote><h2 id="准备安装之前"><a href="#准备安装之前" class="headerlink" title="准备安装之前"></a>准备安装之前</h2><h3 id="下载gentoo所需的引导镜像和系统文件压缩包"><a href="#下载gentoo所需的引导镜像和系统文件压缩包" class="headerlink" title="下载gentoo所需的引导镜像和系统文件压缩包"></a>下载gentoo所需的引导镜像和系统文件压缩包</h3><p>下载地址：<br><a href="https://www.gentoo.org/downloads/" target="_blank" rel="noopener">https://www.gentoo.org/downloads/</a></p><p>主要文件：</p><ul><li>install-amd64-minimal-20160303.iso</li><li>portage-latest.tar.bz2</li><li>stage3-amd64-20160303.tar.bz2</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir gentoo/  &amp;&amp; cd gentoo/</span><br><span class="line">$ wget -c  # http://mirrors.163.com/gentoo/releases/amd64/autobuilds/20160303/install-amd64-minimal-20160303.iso</span><br><span class="line">$ wget -c http://mirrors.163.com/gentoo/snapshots/portage-latest.tar.bz2</span><br><span class="line">$ wget -c http://mirrors.163.com/gentoo/releases/amd64/autobuilds/20160303/stage3-amd64-20160303.tar.bz2</span><br></pre></td></tr></table></figure><h3 id="U盘准备"><a href="#U盘准备" class="headerlink" title="U盘准备"></a>U盘准备</h3><p>插入U盘，查看U盘设备名,不需求挂载<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ lsblk</span><br><span class="line">$ sudo dd if=install-amd64-minimal-20160303.iso of=/dev/sdb</span><br></pre></td></tr></table></figure><p></p><p>这样，就制作好了U盘启动了，把U盘插入要安装的机子，配置BIOS通过U盘启动，就可以进入光盘引导的临时系统。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="配置临时系统"><a href="#配置临时系统" class="headerlink" title="配置临时系统"></a>配置临时系统</h3><blockquote><p>安装gentoo最主要是先把网络配置好，这里我安装的时候遇到了个非常郁闷的问题，就是，公司的个别网段限制下载，导致我在配置网络的时候浪费了不少时间，所以最好先确认一下，你所在的网段是否可以使用wget下载文件。</p></blockquote><h4 id="配置IP"><a href="#配置IP" class="headerlink" title="配置IP"></a>配置IP</h4><p>通常启动U盘临时系统应该可以dhcp分配到一个ip,但是我因为是公司的网络，所以最好手动配置一下<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ip addr add 192.168.3.155/24 dev enp0s25</span><br><span class="line"># ip route add default via 192.168.3.1 dev enp0s25</span><br><span class="line"># echo &quot;192.168.1.1&quot; &gt; /etc/resolv.conf</span><br></pre></td></tr></table></figure><p></p><h4 id="配置ssh链接"><a href="#配置ssh链接" class="headerlink" title="配置ssh链接"></a>配置ssh链接</h4><p>为了方便，最好远程链接到临时系统下，那么就得配置sshd服务。</p><p>==Tip: 最新的sshd服务器默认限制root登陆，需要修改一下/etc/ssh/sshd_config<br>配置PermitRootLogin 为 yes==<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># /etc/init.d/sshd start</span><br><span class="line"># passwd root               ####配置root用户密码</span><br></pre></td></tr></table></figure><p></p><p>以上，我们就可以到本机，使用ssh远程登陆这个U盘挂启的临时系统了</p><h3 id="安装到硬盘上"><a href="#安装到硬盘上" class="headerlink" title="安装到硬盘上"></a>安装到硬盘上</h3><h4 id="系统分区fdisk"><a href="#系统分区fdisk" class="headerlink" title="系统分区fdisk"></a>系统分区fdisk</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># fdisk -l</span><br><span class="line">Device     Boot     Start       End   Sectors  Size Id Type</span><br><span class="line">/dev/sda1            2048      6143      4096    2M ef EFI (FAT-12/16/32)</span><br><span class="line">/dev/sda2            6144    268287    262144  128M 83 Linux</span><br><span class="line">/dev/sda3          268288  17045503  16777216    8G 82 Linux swap / Solaris</span><br><span class="line">/dev/sda4        17045504 937703087 920657584  439G  5 Extended</span><br><span class="line">/dev/sda5        17047552 226762751 209715200  100G 83 Linux</span><br><span class="line">/dev/sda6       226764800 937703087 710938288  339G 83 Linux</span><br><span class="line"># fdisk /dev/sda</span><br></pre></td></tr></table></figure><p>使用fdisk分区以前有详细的说明过，在这里就不再说了。不懂的，请写看一下这个<br><a href="https://www.hcaijin.com/shu-mei-pai-an-zhuang-gentoo-linux/" target="_blank" rel="noopener">树莓派安装Gentoo Linux</a> 1.1.3 节</p><p>也可以参照 <a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Disks" target="_blank" rel="noopener">官方分区方案</a></p><h4 id="重新读取sda分区表"><a href="#重新读取sda分区表" class="headerlink" title="重新读取sda分区表:"></a>重新读取sda分区表:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># partx -a /dev/sda</span><br></pre></td></tr></table></figure><h4 id="格式化分区为文件系统"><a href="#格式化分区为文件系统" class="headerlink" title="格式化分区为文件系统"></a>格式化分区为文件系统</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkfs.ext2 /dev/sda2</span><br><span class="line"># mkfs.ext4 /dev/sda5</span><br><span class="line"># mkfs.ext4 /dev/sda6</span><br></pre></td></tr></table></figure><h4 id="格式化swap分区并激活"><a href="#格式化swap分区并激活" class="headerlink" title="格式化swap分区并激活"></a>格式化swap分区并激活</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkswap /dev/sda3</span><br><span class="line"># swapon /dev/sda3</span><br></pre></td></tr></table></figure><h4 id="创建系统临时挂载点"><a href="#创建系统临时挂载点" class="headerlink" title="创建系统临时挂载点"></a>创建系统临时挂载点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mount /dev/sda5 /mnt/gentoo</span><br><span class="line"># mkdir -p /mnt/gentoo/&#123;boot,home,&#125;</span><br><span class="line"># mount /dev/sda2 /mnt/gentoo/boot</span><br><span class="line"># mount /dev/sda6 /mnt/gentoo/home</span><br></pre></td></tr></table></figure><h3 id="设定日期和时间"><a href="#设定日期和时间" class="headerlink" title="设定日期和时间"></a>设定日期和时间</h3><p>安装Gentoo之前，请确保日期和时间是否正确设置。错误配置的时钟可能会产生各种奇怪的错误！==主要==！！！</p><p>要验证当前日期和时间，运行日期：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># date</span><br><span class="line">Sat Mar  5 16:26:08 UTC 2016</span><br></pre></td></tr></table></figure><p></p><p>如果时间不对，请使用 <code>MMDDhhmmYYYY</code> 这样的格式配置一下日期和时间<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date 030516262016</span><br></pre></td></tr></table></figure><p></p><h3 id="下载和解压相关包"><a href="#下载和解压相关包" class="headerlink" title="下载和解压相关包"></a>下载和解压相关包</h3><h4 id="使用临时系统自带的links下载stage3和portage"><a href="#使用临时系统自带的links下载stage3和portage" class="headerlink" title="使用临时系统自带的links下载stage3和portage"></a>使用临时系统自带的links下载stage3和portage</h4><p>==Tip: 如果前面已经在本机下载过了可以跳过这一步==<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># links https://www.gentoo.org/downloads/mirrors/</span><br></pre></td></tr></table></figure><p></p><p>或者配置代理下载：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># links -http-proxy proxy.server.com:8080   https://www.gentoo.org/downloads/mirrors/</span><br></pre></td></tr></table></figure><p></p><h4 id="效验下载的文件"><a href="#效验下载的文件" class="headerlink" title="效验下载的文件"></a>效验下载的文件</h4><p>效验下载的文件是否完整，打开 .DIGESTS(.asc) 相关文件对比sha512加密的是否一至。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># openssl dgst -r -sha512 stage3-amd64-20160303.tar.bz2</span><br></pre></td></tr></table></figure><p></p><h4 id="解压stage3和portage"><a href="#解压stage3和portage" class="headerlink" title="解压stage3和portage"></a>解压stage3和portage</h4><p>把下载好的stage3和portage放到/mnt/gentoo目录下，进入目录解压：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd /mnt/gentoo/</span><br><span class="line"># tar xvjpf stage3-*.tar.bz2 --xattrs</span><br></pre></td></tr></table></figure><p></p><p>==注: stage3解压的文件是Gentoo的目录结构，所以要解压到临时的系统目录下,即/mnt/gentoo，方便后面进行chroot==</p><p>下面解压portage，这个解压需要一点时间。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar jxvf portage-latest.tar.bz2 -C /mnt/gentoo/usr</span><br></pre></td></tr></table></figure><p></p><p>==注: portage-latest.tar.bz2解压的文件为系统软件目录结构,需要解压到/mnt/gentoo/usr目录下==</p><h3 id="安装基本gentoo系统"><a href="#安装基本gentoo系统" class="headerlink" title="安装基本gentoo系统"></a>安装基本gentoo系统</h3><h4 id="配置portage-make-参数"><a href="#配置portage-make-参数" class="headerlink" title="配置portage make 参数"></a>配置portage make 参数</h4><ul><li>配置了MAKEOPTS为cpu核心数+1</li><li>配置就近的镜像地址 GETOO_MIRRORS 为厦门大学的镜像源<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cat /etc/mnt/gentoo/etc/portage/make.conf</span><br></pre></td></tr></table></figure></li></ul><p><img src="/content/images/2016/03/--_2016-03-05_16-53-28.png" alt=""></p><p>==Tip: 参数配置文件/mnt/gentoo/usr/share/portage/config/make.conf.example ==</p><h4 id="配置主要Gentoo的存储库"><a href="#配置主要Gentoo的存储库" class="headerlink" title="配置主要Gentoo的存储库"></a>配置主要Gentoo的存储库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir /mnt/gentoo/etc/portage/repos.conf</span><br><span class="line"># cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/--_2016-03-05_17-00-14.png" alt=""></p><h4 id="配置chroot环境的dns"><a href="#配置chroot环境的dns" class="headerlink" title="配置chroot环境的dns"></a>配置chroot环境的dns</h4><p>只需要把livecd临时环境的resolv.conf复制到要chroot的目录里就好了，如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -L /etc/resolv.conf /mnt/gentoo/etc/</span><br></pre></td></tr></table></figure><p></p><h4 id="挂载必要的文件系统"><a href="#挂载必要的文件系统" class="headerlink" title="挂载必要的文件系统"></a>挂载必要的文件系统</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mount -t proc proc /mnt/gentoo/proc</span><br><span class="line"># mount --rbind /sys /mnt/gentoo/sys</span><br><span class="line"># mount --make-rslave /mnt/gentoo/sys</span><br><span class="line"># mount --rbind /dev /mnt/gentoo/dev</span><br><span class="line"># mount --make-rslave /mnt/gentoo/dev</span><br></pre></td></tr></table></figure><h4 id="Chroot-到新的环境"><a href="#Chroot-到新的环境" class="headerlink" title="Chroot 到新的环境"></a>Chroot 到新的环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># chroot /mnt/gentoo /bin/bash</span><br><span class="line"># source /etc/profile</span><br><span class="line"># export PS1=&quot;(chroot) $PS1&quot;</span><br></pre></td></tr></table></figure><h4 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h4><p>这不是必要的步骤<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sed -i -e &apos;s/hostname.*/hostname=&quot;hcj.com&quot;/&apos; /etc/conf.d/hostname</span><br><span class="line"># echo &quot;127.0.0.1 hcj.com localhost&quot; &gt; /etc/hosts</span><br></pre></td></tr></table></figure><p></p><h4 id="配置Portage"><a href="#配置Portage" class="headerlink" title="配置Portage"></a>配置Portage</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># emerge-webrsync</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/--_2016-03-05_17-33-41.png" alt=""></p><p>我在配置这个的时候报错了，按照提示删除tmestamp.x文件即可。</p><p>更新portage树<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># emerge --sync</span><br></pre></td></tr></table></figure><p></p><p>小内存的情况使用静默模式<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># emerge --sync --quiet</span><br></pre></td></tr></table></figure><p></p><h4 id="配置系统环境"><a href="#配置系统环境" class="headerlink" title="配置系统环境"></a>配置系统环境</h4><p>查看更新的通知<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># eselect news list</span><br><span class="line"># eselect news read</span><br></pre></td></tr></table></figure><p></p><p>选择适合的配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># eselect profile list</span><br><span class="line"># eselect profile set 3    ### 我选择的是桌面环境系统</span><br></pre></td></tr></table></figure><p></p><p>更新timezone<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ls /usr/share/zoneinfo</span><br><span class="line"># echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</span><br><span class="line"># emerge --config sys-libs/timezone-data</span><br></pre></td></tr></table></figure><p></p><p>配置语言编码<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># nano -w /etc/locale.gen</span><br><span class="line"># locale-gen</span><br><span class="line"># eselect locale list</span><br><span class="line">Available targets for the LANG variable:</span><br><span class="line">  [1]   C</span><br><span class="line">  [2]   POSIX</span><br><span class="line">  [3]   en_US</span><br><span class="line">  [4]   en_US.iso88591</span><br><span class="line">  [5]   en_US.utf8</span><br><span class="line">  [6]   zh_CN.utf8 *</span><br><span class="line">  [ ]   (free form)</span><br><span class="line"></span><br><span class="line"># eselect locale set 6</span><br></pre></td></tr></table></figure><p></p><p>更新一下环境<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># env-update &amp;&amp; source /etc/profile &amp;&amp; export PS1=&quot;(chroot) $PS1&quot;</span><br></pre></td></tr></table></figure><p></p><h3 id="内核配置"><a href="#内核配置" class="headerlink" title="内核配置"></a>内核配置</h3><h4 id="安装内核源码"><a href="#安装内核源码" class="headerlink" title="安装内核源码"></a>安装内核源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># emerge --ask sys-kernel/gentoo-sources</span><br><span class="line"># genkernel --install initramfs</span><br></pre></td></tr></table></figure><h4 id="配置fstab"><a href="#配置fstab" class="headerlink" title="配置fstab"></a>配置fstab</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/fstab</span><br></pre></td></tr></table></figure><p><img src="/content/images/2016/03/--_2016-03-05_20-12-09.png" alt=""></p><h4 id="编译内核文件"><a href="#编译内核文件" class="headerlink" title="编译内核文件"></a>编译内核文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genkernel all</span><br></pre></td></tr></table></figure><p>完成以上就可以在/boot目录下看到内核文件<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ls /boot/kernel* /boot/initramfs*</span><br></pre></td></tr></table></figure><p></p><p>==注: genkernel编译出的内核支持几乎所有硬件，编译需要一段很长的时间，一旦genkernel运行完成，一个包括全部模块和initrd的内核将被建立。在后面配置引导程序时我们将会用到这个内核和initrd。请记下内核和initrd的名字，因为您将在配置引导程序的时候用到他们。initrd将会在启动真正的系统前自动识别硬件（如同安装光盘一样）==</p><h3 id="安装其他软件"><a href="#安装其他软件" class="headerlink" title="安装其他软件"></a>安装其他软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># emerge vim                ### 安装vim 方便后面的配置</span><br><span class="line"># emerge syslog-ng          ### 安装系统日志管理</span><br><span class="line"># rc-update add sysklogd default</span><br><span class="line"># emerge logrotate          ### 日志格式化工具</span><br><span class="line"># emerge --ask sys-process/cronie    ### 计划任务系统</span><br><span class="line"># rc-update add cronie default</span><br><span class="line"># emerge --ask net-misc/dhcpcd   </span><br><span class="line"># emerge --ask sys-apps/mlocate       ### 快速索引</span><br></pre></td></tr></table></figure><h4 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cat /etc/conf.d/net</span><br><span class="line">config_enp0s25=&quot;192.168.3.155 netmask 255.255.255.0 brd 192.168.3.255&quot;</span><br><span class="line">routes_enp0s25=&quot;default via 192.168.3.1&quot;</span><br><span class="line"># ln -s /etc/init.d/net.lo /etc/init.d/net.enp0s25</span><br><span class="line"># rc-update add net.enp0s25 default</span><br><span class="line"># rc-update add sshd default</span><br></pre></td></tr></table></figure><h4 id="配置root用户密码"><a href="#配置root用户密码" class="headerlink" title="配置root用户密码"></a>配置root用户密码</h4><p>这是必要的，为了从新系统能进入<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># passwd</span><br></pre></td></tr></table></figure><p></p><h3 id="配置GRUB引导程序"><a href="#配置GRUB引导程序" class="headerlink" title="配置GRUB引导程序"></a>配置GRUB引导程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># emerge --ask sys-boot/grub:2</span><br><span class="line"># grub2-install /dev/sda</span><br><span class="line"># grub2-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h3 id="最后重启一下系统"><a href="#最后重启一下系统" class="headerlink" title="最后重启一下系统"></a>最后重启一下系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># exit</span><br><span class="line"># cd</span><br><span class="line"># umount -l /mnt/gentoo/dev&#123;/shm,/pts,&#125;</span><br><span class="line"># umount /mnt/gentoo&#123;/boot,/sys,/proc,&#125;</span><br><span class="line"># reboot</span><br></pre></td></tr></table></figure><p><a href="https://gentoo-handbook.lugons.org/doc/zh_cn/handbook/handbook-amd64.xml" target="_blank" rel="noopener">引用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;再一次捣鼓gentoo,还是遇到了相当多的麻烦，这里把安装的方法重新在blog里整理一下，跟着官方安装步骤一点点来。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;准备安装之前&quot;&gt;&lt;a href=&quot;#准备安装之前&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="linux" scheme="http://hcaijin.com/tags/linux/"/>
    
      <category term="Gentoo" scheme="http://hcaijin.com/tags/Gentoo/"/>
    
  </entry>
  
  <entry>
    <title>ssh 服务端配置</title>
    <link href="http://hcaijin.com/ssh-fu-wu-duan-pei-zhi/"/>
    <id>http://hcaijin.com/ssh-fu-wu-duan-pei-zhi/</id>
    <published>2016-03-04T17:32:03.000Z</published>
    <updated>2016-03-04T17:42:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近，在使用U盘安装gentoo配置sshd服务端碰到了问题，记录一下ssh服务端的配置文件。</p></blockquote><h2 id="关于-SSH-Server-的整体设定，包含使用的-port-啦，以及使用的密码演算方式"><a href="#关于-SSH-Server-的整体设定，包含使用的-port-啦，以及使用的密码演算方式" class="headerlink" title="关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式"></a>关于 SSH Server 的整体设定，包含使用的 port 啦，以及使用的密码演算方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Port 22　　　　　　　　　　# SSH 预设使用 22 这个 port，您也可以使用多的 port ！</span><br><span class="line">　　　　　　　　　　　　　 # 亦即重复使用 port 这个设定项目即可！</span><br><span class="line">Protocol 2,1　　　　　　　 # 选择的 SSH 协议版本，可以是 1 也可以是 2 ，</span><br><span class="line">　　　　　　　　　　　　　 # 如果要同时支持两者，就必须要使用 2,1 这个分隔了！</span><br><span class="line">#ListenAddress 0.0.0.0　　 # 监听的主机适配卡！举个例子来说，如果您有两个 IP，</span><br><span class="line">　　　　　　　　　　　　　 # 分别是 192.168.0.100 及 192.168.2.20 ，那么只想要</span><br><span class="line">　　　　　　　　　　　　　 # 开放 192.168.0.100 时，就可以写如同下面的样式：</span><br><span class="line">ListenAddress 192.168.0.100          # 只监听来自 192.168.0.100 这个 IP 的SSH联机。</span><br><span class="line">　　　　　　　　　　　　　　　　　　 # 如果不使用设定的话，则预设所有接口均接受 SSH</span><br><span class="line">PidFile /var/run/sshd.pid　　　　　　# 可以放置 SSHD 这个 PID 的档案！左列为默认值</span><br><span class="line">LoginGraceTime 600　　　　 # 当使用者连上 SSH server 之后，会出现输入密码的画面，</span><br><span class="line">　　　　　　　　　　　　　 # 在该画面中，在多久时间内没有成功连上 SSH server ，</span><br><span class="line">　　　　　　　　　　　　　 # 就断线！时间为秒！</span><br><span class="line">Compression yes　　　　　　# 是否可以使用压缩指令？当然可以啰！</span><br></pre></td></tr></table></figure><p>　</p><h2 id="说明主机的-Private-Key-放置的档案，预设使用下面的档案即可！"><a href="#说明主机的-Private-Key-放置的档案，预设使用下面的档案即可！" class="headerlink" title="说明主机的 Private Key 放置的档案，预设使用下面的档案即可！"></a>说明主机的 Private Key 放置的档案，预设使用下面的档案即可！</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HostKey /etc/ssh/ssh_host_key　　　　# SSH version 1 使用的私钥</span><br><span class="line">HostKey /etc/ssh/ssh_host_rsa_key　　# SSH version 2 使用的 RSA 私钥</span><br><span class="line">HostKey /etc/ssh/ssh_host_dsa_key　　# SSH version 2 使用的 DSA 私钥</span><br></pre></td></tr></table></figure><h3 id="关于-version-1-的一些设定！"><a href="#关于-version-1-的一些设定！" class="headerlink" title="关于 version 1 的一些设定！"></a>关于 version 1 的一些设定！</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">KeyRegenerationInterval 3600　 　　　# 由前面联机的说明可以知道， version 1 会使用 </span><br><span class="line">　　　　　　　　　　　　　　　　　　 # server 的 Public Key ，那么如果这个 Public </span><br><span class="line">　　　　　　　　　　　　　　　　　　 # Key 被偷的话，岂不完蛋？所以需要每隔一段时间</span><br><span class="line">　　　　　　　　　　　　　　　　　　 # 来重新建立一次！这里的时间为秒！</span><br><span class="line">ServerKeyBits 768 　　　　　　　　　 # 没错！这个就是 Server key 的长度！</span><br></pre></td></tr></table></figure><h2 id="关于登录文件的讯息数据放置与-daemon-的名称！"><a href="#关于登录文件的讯息数据放置与-daemon-的名称！" class="headerlink" title="关于登录文件的讯息数据放置与 daemon 的名称！"></a>关于登录文件的讯息数据放置与 daemon 的名称！</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SyslogFacility AUTH　　　　　　　　　# 当有人使用 SSH 登入系统的时候，SSH会记录资</span><br><span class="line">　　　　　　　　　　　　　　　　　　 # 讯，这个信息要记录在什么 daemon name 底下？</span><br><span class="line">　　　　　　　　　　　　　　　　　　 # 预设是以 AUTH 来设定的，即是 /var/log/secure</span><br><span class="line">　　　　　　　　　　　　　　　　　　 # 里面！什么？忘记了！回到 Linux 基础去翻一下</span><br><span class="line">　　　　　　　　　　　　　　　　　　 # 其它可用的 daemon name 为：DAEMON,USER,AUTH,</span><br><span class="line">　　　　　　　　　　　　　　　　　　 # LOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5,</span><br><span class="line">LogLevel INFO　　　　　　　　　　　　# 登录记录的等级！嘿嘿！任何讯息！</span><br><span class="line">　　　　　　　　　　　　　　　　　　 # 同样的，忘记了就回去参考！</span><br></pre></td></tr></table></figure><h2 id="安全设定项目！极重要！"><a href="#安全设定项目！极重要！" class="headerlink" title="安全设定项目！极重要！"></a>安全设定项目！极重要！</h2><h3 id="登入设定部分"><a href="#登入设定部分" class="headerlink" title="登入设定部分"></a>登入设定部分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin no　　 　　# 是否允许 root 登入！最新版本的sshd配置默认是不允许使用root登陆的，如果要使用root登陆，要把no 改为 yes 。</span><br><span class="line">UserLogin no　　　　　　　 # 在 SSH 底下本来就不接受 login 这个程序的登入！</span><br><span class="line">StrictModes yes　　　　　　# 当使用者的 host key 改变之后，Server 就不接受联机，</span><br><span class="line">　　　　　　　　　　　　　 # 可以抵挡部分的木马程序！</span><br><span class="line">RSAAuthentication yes　　 # 是否使用纯的 RSA 认证！？仅针对 version 1 ！</span><br><span class="line">PubkeyAuthentication yes　 # 是否允许 Public Key ？当然允许啦！只有 version 2</span><br><span class="line">AuthorizedKeysFile      .ssh/authorized_keys</span><br><span class="line">　　　　　　　　　　　　　 # 上面这个在设定若要使用不需要密码登入的账号时，那么那个</span><br><span class="line">　　　　　　　　　　　　　 # 账号的存放档案所在档名！</span><br></pre></td></tr></table></figure><h3 id="认证部分"><a href="#认证部分" class="headerlink" title="认证部分"></a>认证部分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RhostsAuthentication no　　# 本机系统不止使用 .rhosts ，因为仅使用 .rhosts 太</span><br><span class="line">　　　　　　　　　　　　　 # 不安全了，所以这里一定要设定为 no ！</span><br><span class="line">IgnoreRhosts yes　　　　　 # 是否取消使用 ~/.ssh/.rhosts 来做为认证！当然是！</span><br><span class="line">RhostsRSAAuthentication no # 这个选项是专门给 version 1 用的，使用 rhosts 档案在</span><br><span class="line">　　　　　　　　　　　　　 # /etc/hosts.equiv配合 RSA 演算方式来进行认证！不要使用</span><br><span class="line">HostbasedAuthentication no # 这个项目与上面的项目类似，不过是给 version 2 使用的！</span><br><span class="line">IgnoreUserKnownHosts no　　# 是否忽略家目录内的 ~/.ssh/known_hosts 这个档案所记录</span><br><span class="line">　　　　　　　　　　　　　 # 的主机内容？当然不要忽略，所以这里就是 no 啦！</span><br><span class="line">PasswordAuthentication yes # 密码验证当然是需要的！所以这里写 yes 啰！</span><br><span class="line">PermitEmptyPasswords no　　# 若上面那一项如果设定为 yes 的话，这一项就最好设定</span><br><span class="line">　　　　　　　　　　　　　 # 为 no ，这个项目在是否允许以空的密码登入！当然不许！</span><br><span class="line">ChallengeResponseAuthentication yes  # 挑战任何的密码认证！所以，任何 login.conf </span><br><span class="line">　　　　　　　　　　　　　　　　　　 # 规定的认证方式，均可适用！</span><br><span class="line">#PAMAuthenticationViaKbdInt yes      # 是否启用其它的 PAM 模块！启用这个模块将会</span><br><span class="line">　　　　　　　　　　　　　　　　　　 # 导致 PasswordAuthentication 设定失效！</span><br></pre></td></tr></table></figure><p>　</p><h3 id="与-Kerberos-有关的参数设定！因为我们没有-Kerberos-主机，所以底下不用设定！"><a href="#与-Kerberos-有关的参数设定！因为我们没有-Kerberos-主机，所以底下不用设定！" class="headerlink" title="与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！"></a>与 Kerberos 有关的参数设定！因为我们没有 Kerberos 主机，所以底下不用设定！</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#KerberosAuthentication no</span><br><span class="line">#KerberosOrLocalPasswd yes</span><br><span class="line">#KerberosTicketCleanup yes</span><br><span class="line">#KerberosTgtPassing no</span><br></pre></td></tr></table></figure><h3 id="底下是有关在-X-Window-底下使用的相关设定！"><a href="#底下是有关在-X-Window-底下使用的相关设定！" class="headerlink" title="底下是有关在 X-Window 底下使用的相关设定！"></a>底下是有关在 X-Window 底下使用的相关设定！</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X11Forwarding yes</span><br><span class="line">#X11DisplayOffset 10</span><br><span class="line">#X11UseLocalhost yes</span><br></pre></td></tr></table></figure><h3 id="登入后的项目："><a href="#登入后的项目：" class="headerlink" title="登入后的项目："></a>登入后的项目：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PrintMotd no              # 登入后是否显示出一些信息呢？例如上次登入的时间、地点等</span><br><span class="line">　　　　　　　　　　　　　# 等，预设是 yes ，但是，如果为了安全，可以考虑改为 no ！</span><br><span class="line">PrintLastLog yes　　　　　# 显示上次登入的信息！可以啊！预设也是 yes ！</span><br><span class="line">KeepAlive yes　　　　　　 # 一般而言，如果设定这项目的话，那么 SSH Server 会传送</span><br><span class="line">　　　　　　　　　　　　　# KeepAlive 的讯息给 Client 端，以确保两者的联机正常！</span><br><span class="line">　　　　　　　　　　　　　# 在这个情况下，任何一端死掉后， SSH 可以立刻知道！而不会</span><br><span class="line">　　　　　　　　　　　　　# 有僵尸程序的发生！</span><br><span class="line">UsePrivilegeSeparation yes # 使用者的权限设定项目！就设定为 yes 吧！</span><br><span class="line">MaxStartups 10　　　　　　# 同时允许几个尚未登入的联机画面？当我们连上 SSH ，</span><br><span class="line">　　　　　　　　　　　　　# 但是尚未输入密码时，这个时候就是我们所谓的联机画面啦！</span><br><span class="line">　　　　　　　　　　　　　# 在这个联机画面中，为了保护主机，所以需要设定最大值，</span><br><span class="line">　　　　　　　　　　　　　# 预设最多十个联机画面，而已经建立联机的不计算在这十个当中</span><br></pre></td></tr></table></figure><h3 id="关于使用者抵挡的设定项目："><a href="#关于使用者抵挡的设定项目：" class="headerlink" title="关于使用者抵挡的设定项目："></a>关于使用者抵挡的设定项目：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DenyUsers *　　　　　　　 # 设定受抵挡的使用者名称，如果是全部的使用者，那就是全部</span><br><span class="line">　　　　　　　　　　　　　# 挡吧！若是部分使用者，可以将该账号填入！例如下列！</span><br><span class="line">DenyUsers test</span><br><span class="line">DenyGroups test　　　　　 # 与 DenyUsers 相同！仅抵挡几个群组而已！</span><br></pre></td></tr></table></figure><h2 id="关于-SFTP-服务的设定项目！"><a href="#关于-SFTP-服务的设定项目！" class="headerlink" title="关于 SFTP 服务的设定项目！"></a>关于 SFTP 服务的设定项目！</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Subsystem       sftp    /usr/lib/ssh/sftp-server</span><br></pre></td></tr></table></figure><p>　<br>基本上，在您的系统中，『除非有必要，否则请不要更改 /etc/ssh/sshd_config 这个档案的设定值！』因为预设的情况下通常都是最严密的 SSH 保护了，因此，可以不需要更动他！上面的说明仅是在让大家了解每个细项的一些基本内容而已！需要注意的是最后一项，如果您不愿意开放 SFTP 的话，将最后一行批注掉即可！ 　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;最近，在使用U盘安装gentoo配置sshd服务端碰到了问题，记录一下ssh服务端的配置文件。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;关于-SSH-Server-的整体设定，包含使用的-port-啦，以及使用的密码演算方式&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="linux" scheme="http://hcaijin.com/tags/linux/"/>
    
      <category term="ssh" scheme="http://hcaijin.com/tags/ssh/"/>
    
      <category term="sshd" scheme="http://hcaijin.com/tags/sshd/"/>
    
  </entry>
  
  <entry>
    <title>10个很有用的 Git 命令（转）</title>
    <link href="http://hcaijin.com/10ge-hen-you-yong-de-git-ming-ling-zhuan/"/>
    <id>http://hcaijin.com/10ge-hen-you-yong-de-git-ming-ling-zhuan/</id>
    <published>2016-02-16T13:24:34.000Z</published>
    <updated>2016-02-16T13:31:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.sae.sina.com.cn/archives/3003" target="_blank" rel="noopener">转自</a><a href="http://blog.sae.sina.com.cn/archives/3003" target="_blank" rel="noopener">http://blog.sae.sina.com.cn/archives/3003</a></p><blockquote><p>这里给大家分享一些很有用的 Git 命令，其中很多用法你可能都不知道，无论你是工作在团队环境中或在您的个人项目中，这些命令将对你帮助很大，让你可以更加高效的进行项目开发，更轻松愉快的工作和生活。</p></blockquote><h3 id="导出最后一次提交修改过的文件"><a href="#导出最后一次提交修改过的文件" class="headerlink" title="导出最后一次提交修改过的文件"></a>导出最后一次提交修改过的文件</h3><p>我一直在使用这个命令定期进行发送给其他人进行审查/整合。这条命令将把近期提交的修改过的文件导出到一个zip文件。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git archive -o ../updated.zip HEAD $(git diff --name-only HEAD^)</span><br></pre></td></tr></table></figure><p></p><h3 id="导出两次提交之间修改过的文件"><a href="#导出两次提交之间修改过的文件" class="headerlink" title="导出两次提交之间修改过的文件"></a>导出两次提交之间修改过的文件</h3><p>同样，如果你需要导出两次提交之间修改过的文件，你可以用这一个。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git archive -o ../latest.zip NEW_COMMIT_ID_HERE $(git diff --name-only </span><br><span class="line">OLD_COMMIT_ID_HERE NEW_COMMIT_ID_HERE)</span><br></pre></td></tr></table></figure><p></p><h3 id="克隆一个特定的远程分支"><a href="#克隆一个特定的远程分支" class="headerlink" title="克隆一个特定的远程分支"></a>克隆一个特定的远程分支</h3><p>如果你想从远程仓库克隆特定的一个分支，这条命令对你很有用：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init </span><br><span class="line"></span><br><span class="line">git remote add -t BRANCH_NAME_HERE -f origin REMOTE_REPO_URL_PATH_HERE </span><br><span class="line"></span><br><span class="line">git checkout BRANCH_NAME_HERE</span><br></pre></td></tr></table></figure><p></p><h3 id="从无关的本地仓库应用补丁"><a href="#从无关的本地仓库应用补丁" class="headerlink" title="从无关的本地仓库应用补丁"></a>从无关的本地仓库应用补丁</h3><p>如果您需要申请从提交的一些其他不相关的创库到本地存储库，这里是一个快捷的方式：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --git-dir=PATH_TO_OTHER_REPOSITORY_HERE/.git format-patch -k -1 --stdout</span><br><span class="line"></span><br><span class="line">COMMIT_HASH_ID_HERE| git am -3 -k</span><br></pre></td></tr></table></figure><p></p><h3 id="检查您的分支变化是是否其他分支的一部分"><a href="#检查您的分支变化是是否其他分支的一部分" class="headerlink" title="检查您的分支变化是是否其他分支的一部分"></a>检查您的分支变化是是否其他分支的一部分</h3><p>cherry 命令可以让你检查你的分支的变化是否存在于其他一些分支之中。它会显示在当前分支相对于给定的分支的修改，用+或-标志提示提交合并与否。+表示不存在，而-表示存在于给定的分支。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git cherry -v OTHER_BRANCH_NAME_HERE </span><br><span class="line"></span><br><span class="line">#For example: to check with master branch </span><br><span class="line">git cherry -v master</span><br></pre></td></tr></table></figure><p></p><h3 id="启动一个无历史的新分支"><a href="#启动一个无历史的新分支" class="headerlink" title="启动一个无历史的新分支"></a>启动一个无历史的新分支</h3><p>有时候，你需要启动一个新的分支，同时想摒弃历史信息，例如，你想将代码放在公共领域（开源）又不想共享历史信息。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --orphan NEW_BRANCH_NAME_HERE</span><br></pre></td></tr></table></figure><p></p><h3 id="在不切换分支的情况下从其它分支检出文件"><a href="#在不切换分支的情况下从其它分支检出文件" class="headerlink" title="在不切换分支的情况下从其它分支检出文件"></a>在不切换分支的情况下从其它分支检出文件</h3><p>下面的命令是从其他分支获取文件，而不用切换分支。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout BRANCH_NAME_HERE -- PATH_TO_FILE_IN_BRANCH_HERE</span><br></pre></td></tr></table></figure><p></p><h3 id="忽略跟踪文件的修改"><a href="#忽略跟踪文件的修改" class="headerlink" title="忽略跟踪文件的修改"></a>忽略跟踪文件的修改</h3><p>如果你工作在一个团队，他们都是工作在同一个分支，你需要频繁的读取/合并文件。但是有时复位了你环境的特定配置，你必须在合并后每一次都再改一下。使用这个命令，你可以忽略更改特定的文件：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --assume-unchanged PATH_TO_FILE_HERE</span><br></pre></td></tr></table></figure><p></p><h3 id="检查提交的修改是否发布版本的一部分"><a href="#检查提交的修改是否发布版本的一部分" class="headerlink" title="检查提交的修改是否发布版本的一部分"></a>检查提交的修改是否发布版本的一部分</h3><p>这个 name-rev 命令可以告诉你提交相对于最新发布版本的位置。利用这一点，你可以检查你的变化是否发布版本的一部分。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git name-rev --name-only COMMIT_HASH_HERE</span><br></pre></td></tr></table></figure><p></p><h3 id="使用-pull-rebase-操作替代-merge"><a href="#使用-pull-rebase-操作替代-merge" class="headerlink" title="使用 pull rebase 操作替代 merge"></a>使用 pull rebase 操作替代 merge</h3><p>如果你工作的团队正工作在同一个分支，那么你所要做的获取/合并或经常拉取。分支合并的 git 记录与合并提交时提示功能分支被并入主干。但在多个团队成员工作的同一分支的情况下，经常合并导致在日志中多个合并的消息引起混乱。所以你可以使用 pull rebase，以保持历史信息清除了无用合并的消息。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config branch.BRANCH_NAME_HERE.rebase true</span><br></pre></td></tr></table></figure><p></p><p>此外，您可以配置一个特定的分支总是衍合：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://blog.sae.sina.com.cn/archives/3003&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;转自&lt;/a&gt;&lt;a href=&quot;http://blog.sae.sina.com.cn/archives/30
      
    
    </summary>
    
    
      <category term="linux" scheme="http://hcaijin.com/tags/linux/"/>
    
      <category term="git" scheme="http://hcaijin.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器配置java web服务总结</title>
    <link href="http://hcaijin.com/di-ci-pei-zhi-java-webfu-wu/"/>
    <id>http://hcaijin.com/di-ci-pei-zhi-java-webfu-wu/</id>
    <published>2016-01-24T19:14:16.000Z</published>
    <updated>2016-01-25T16:06:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先，以前是写php的，从未接触java的开发。最近公司项目重组，被安排说去做java开发，而且要快速上手,安排培训，可是，培训的都是windows下的IDE开发配置。没办法，Google呗。这样就有了这篇东拼西奏的文章，也有自己的一些经验总结，没少碰壁，不过这里还是感谢同事的帮忙，让我对java的运行有了清晰的认识。</p></blockquote><h2 id="了解java包运行原理"><a href="#了解java包运行原理" class="headerlink" title="了解java包运行原理"></a>了解java包运行原理</h2><p>java是编译型语言，自然少不了打包，链接，当然这些都可以用maven来管理。用maven打包，链接生成的安装包就是可以直接使用java来运行的，我们这里主要说web服务的配置，所以少不了tomcat。使用tomcat来运行web项目包，就可以在浏览器端访问，java应用服务，这就是大致的过程。</p><h2 id="安装必要的软件包"><a href="#安装必要的软件包" class="headerlink" title="安装必要的软件包"></a>安装必要的软件包</h2><h3 id="安装jdk-至于安装哪个版本，视情况而定"><a href="#安装jdk-至于安装哪个版本，视情况而定" class="headerlink" title="安装jdk,至于安装哪个版本，视情况而定"></a>安装jdk,至于安装哪个版本，视情况而定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S jdk8-openjdk</span><br></pre></td></tr></table></figure><p>可以搜索一下<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -Ss java</span><br></pre></td></tr></table></figure><p></p><h3 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S maven</span><br></pre></td></tr></table></figure><p>以上安装成功了以后，我们就可以使用<code>java, mvn</code> 的命令了，由于我们使用的是pacman安装方法，必要的环境变量都已经默认好了，可以不需要配置，具体可以看我以前写的 <a href="http://www.hcaijin.com/java-xue-xi-bi-ji/" target="_blank" rel="noopener">Java 学习笔记1</a></p><h3 id="安装tomcat，同样的源里也有多个版本，视情况安装相应的版本"><a href="#安装tomcat，同样的源里也有多个版本，视情况安装相应的版本" class="headerlink" title="安装tomcat，同样的源里也有多个版本，视情况安装相应的版本"></a>安装tomcat，同样的源里也有多个版本，视情况安装相应的版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S tomcat7</span><br></pre></td></tr></table></figure><h2 id="tomcat-主要配置详解"><a href="#tomcat-主要配置详解" class="headerlink" title="tomcat 主要配置详解"></a>tomcat 主要配置详解</h2><h3 id="主要目录功能"><a href="#主要目录功能" class="headerlink" title="主要目录功能"></a>主要目录功能</h3><p>默认情況 tomcat7 安装路径为 /usr/share/tomcat7，这里罗列一下主要目录的作用：</p><ul><li>/usr/share/tomcat7： 程序的主目录，也是变量 $CATALINA_HOME 所指向的位置，在单 tomcat 实例的情況下，也是变量 $CATALINA_BASE 所指向的位置。</li><li>/usr/share/tomcat7/bin： 程序的执行脚本目录</li><li>conf -&gt; /etc/tomcat7： 配置文档目录，存放主要是配置信息。</li><li>lib -&gt; /usr/share/java/tomcat7： 共用jar包目录，这些包即给 tomcat 使用，也能给 web 应用程序所调用。</li><li>logs -&gt; /var/log/tomcat7： 日志目录，对于查找错误以及查看访问记录很有用。</li><li>webapps -&gt; /var/lib/tomcat7/webapps： 默认的 web 应用程序目录，tomcat7 自带了几个示例应用。</li></ul><h3 id="启动关闭脚本"><a href="#启动关闭脚本" class="headerlink" title="启动关闭脚本"></a>启动关闭脚本</h3><p>我们进入程序执行脚本目录<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/tomcat7 </span><br><span class="line">sudo ./startup.sh</span><br></pre></td></tr></table></figure><p></p><p>以上，tomcat服务就启动成功了，可以在浏览器中访问<code>http://localhost:8080</code> ，如果看到 tomcat 猫即说明服务已经安装成功并且能正常运行了。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./shutdown.sh</span><br></pre></td></tr></table></figure><p></p><p>这两个脚本都是通过调用 catalina.sh 来执行的，具体自己看脚本代码。</p><h2 id="实例讲解tomcat启动java应用"><a href="#实例讲解tomcat启动java应用" class="headerlink" title="实例讲解tomcat启动java应用"></a>实例讲解tomcat启动java应用</h2><p>这里我犯了一个错误，总以为java应用之前总得有个相互调用的关系，没想到其实都已经在maven打包，安装到本地就行了，web应用配置好相应的pom.xml就可以调用maven打包，安装好的后台java应用。</p><p>然后，我们开始说明代码部署过程：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /data/app/                             ###进入工程主目录</span><br><span class="line">git clone git@erp:ecerp-saas              ###从erp服务器拉代码到本地</span><br><span class="line">cd /data/app/ecerp-saas/                  ###进入代码目录</span><br><span class="line">git pull                                  ###这个是同步服务器代码</span><br><span class="line">cd /data/app/ecerp-saas/Sources/ecerp     ###进到主要工程目录</span><br><span class="line">mvn  clean install -Dmaven.test.skip=true ###打包安装工程目录下相应的程序，这样就会编译好应用到本地用户目录下`~/.m2/`</span><br></pre></td></tr></table></figure><p></p><p>在web目录下新建目录erp.hcj.com<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /data/www/</span><br><span class="line">mkdir erp.hcj.com/</span><br><span class="line">cd erp.hcj.com/</span><br></pre></td></tr></table></figure><p></p><p>web应用java环境变量配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch webconfig</span><br><span class="line">cat webconfig</span><br></pre></td></tr></table></figure><p></p><p><img src="/content/images/2016/01/--_2016-01-25_17-47-28.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /data/www/erp.hcj.com/webconfig     ###使用环境变量生效</span><br></pre></td></tr></table></figure><p>创建备份目录,当然这个不是必要的。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">theday=$(date +%Y%m%d)</span><br><span class="line">releaseDir=&quot;/data/deployment/packages/$&#123;theday&#125;&quot;</span><br><span class="line">if [ ! -e $releaseDir ]</span><br><span class="line">then</span><br><span class="line">       mkdir -p $releaseDir</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>然后，我们就可以到java应用安装目录下找packagename，把它移到备份目录<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -fp `find ~/.m2/repository/ -name $packagename` $releaseDir/$packagename</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#备份数据</span><br><span class="line">bktime=$(date +%y%m%d%H%M)</span><br><span class="line">backupdir=&quot;/data/deployment/release-backup/$bktime/$(basename $srvdir)&quot;</span><br><span class="line">if [ ! -e $backupdir ]</span><br><span class="line">then</span><br><span class="line">    mkdir -p $backupdir</span><br><span class="line">fi</span><br><span class="line">rootdir=/data/www/erp.hcj.com/webroot</span><br><span class="line">for files in $(ls $rootdir)</span><br><span class="line">do</span><br><span class="line">    if [ $files == &quot;upload&quot; ]; then</span><br><span class="line">    ¦   echo $files not backup</span><br><span class="line">    else</span><br><span class="line">    ¦   /bin/cp -rfp $rootdir/$files $backupdir</span><br><span class="line">    fi  </span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">### 删除旧应用</span><br><span class="line">rm -rf $rootdir/WEB-INF/*</span><br><span class="line">### 解压文件，在web主目录下生成webroot</span><br><span class="line">packagefile=$releaseDir/$packagename</span><br><span class="line">tar zxf $packagefile -C /data/www/erp.hcj.com</span><br><span class="line">### 修改webroot的权限</span><br><span class="line">chown tomcat7.tomcat7 -R /data/www/erp.hcj.com/webroot</span><br></pre></td></tr></table></figure><p>以上就基本是把java打包的应用程序，安装到了tomcat的webroot目录下了，但是要使这个应用启动成功，还需要配置多实例的tomcat的配置文件server.xml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /data/www/erp.hcj.com</span><br><span class="line">mkdir -p tomcat/&#123;conf,logs,tmp,work,&#125;</span><br><span class="line">cp -r /etc/tomcat7/* tomcat/conf/</span><br><span class="line">sudo chown -R tomcat7.tomcat7 tomcat/</span><br><span class="line">vi server.xml</span><br></pre></td></tr></table></figure><p></p><p>主要修改如下配置：<br><img src="/content/images/2016/01/--_2016-01-25_18-48-50.png" alt=""><br><img src="/content/images/2016/01/--_2016-01-25_18-49-35.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">### 设置tomcat环境变量</span><br><span class="line">export CATALINA_HOME=&quot;/usr/share/tomcat7&quot;</span><br><span class="line">export DUSER=&quot;tomcat7&quot;</span><br><span class="line">export CATALINA_BASE=&quot;/data/www/erp.hcj.com/tomcat&quot;</span><br><span class="line">export CATALINA_PID=&quot;$CATALINA_BASE/tomcat.pid&quot;</span><br><span class="line">export CATALINA_TMPDIR=&quot;$CATALINA_BASE/tmp&quot;</span><br><span class="line">export CATALINA_OUT=&quot;$CATALINA_BASE/logs/catalina.out&quot;                                                                                                                                                                            </span><br><span class="line">export LOCKFILE=&quot;$CATALINA_BASE/tomcat.lock&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">### 启动服务</span><br><span class="line">/bin/bash $CATALINA_HOME/bin/startup.sh</span><br><span class="line">### 关闭服务</span><br><span class="line">/bin/bash $CATALINA_HOME/bin/shutdown.sh</span><br></pre></td></tr></table></figure><p><a href="http://ufaw0116.erufa.com/wordpress/?p=1254&amp;ckattempt=3" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;首先，以前是写php的，从未接触java的开发。最近公司项目重组，被安排说去做java开发，而且要快速上手,安排培训，可是，培训的都是windows下的IDE开发配置。没办法，Google呗。这样就有了这篇东拼西奏的文章，也有自己的一些经验总结，没少
      
    
    </summary>
    
    
      <category term="linux" scheme="http://hcaijin.com/tags/linux/"/>
    
      <category term="java" scheme="http://hcaijin.com/tags/java/"/>
    
      <category term="tomcat" scheme="http://hcaijin.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习笔记2</title>
    <link href="http://hcaijin.com/java-xue-xi-bi-ji-2-2/"/>
    <id>http://hcaijin.com/java-xue-xi-bi-ji-2-2/</id>
    <published>2016-01-19T22:43:02.000Z</published>
    <updated>2016-01-24T19:09:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="镜像配置"><a href="#镜像配置" class="headerlink" title="镜像配置"></a>镜像配置</h2><p>由于maven的中央仓库位于国外，速度慢，也有可能其他原因无法访问，我们可以使用国内的镜像仓库。配置镜像仓库需要修改conf/settings.xml,打开该文件修改mirror标签如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/maven/conf/settings.xml</span><br></pre></td></tr></table></figure><p></p><p><img src="/content/images/2016/01/--_2016-01-20_19-42-35.png" alt=""></p><p>maven仓库默认是放在用户目录的.m2隐藏目录下的 ~/.m2/repository/ 。如果需要将仓库迁移到其他目录，修改conf/settings.xml<br><img src="/content/images/2016/01/--_2016-01-20_19-52-27.png" alt=""></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>配置maven编译程序过程中可用的最大，最下内存，防止内存溢出。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MAVEN_OPTS=&quot;-Xms256m -Xmx512m&quot;</span><br><span class="line">export MAVEN_OPTS</span><br></pre></td></tr></table></figure><p></p><blockquote><p>配置web服务一定要记得设置compressableMimeType<br><img src="/content/images/2016/01/--_2016-01-25_16-02-11.png" alt=""></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;镜像配置&quot;&gt;&lt;a href=&quot;#镜像配置&quot; class=&quot;headerlink&quot; title=&quot;镜像配置&quot;&gt;&lt;/a&gt;镜像配置&lt;/h2&gt;&lt;p&gt;由于maven的中央仓库位于国外，速度慢，也有可能其他原因无法访问，我们可以使用国内的镜像仓库。配置镜像仓库需要修改conf
      
    
    </summary>
    
    
      <category term="java" scheme="http://hcaijin.com/tags/java/"/>
    
      <category term="maven" scheme="http://hcaijin.com/tags/maven/"/>
    
  </entry>
  
</feed>
